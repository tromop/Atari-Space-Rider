

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
; |                Licensed to: <error retrieving user info>                |
; +-------------------------------------------------------------------------+
;
; Input MD5    : E843B8B548377E991D01012638230B30
; Input CRC32  : 27994DD7

; File Name   : C:\Users\Onno Tromop\Desktop\spacerider\space.bin
; Format      : Binary file
; Base Address: 0000h Range: 7000h - 8000h Loaded length: 00001000h

; Processor       : 6800
; Target assembler: Assembler by Frank A. Vorstenbosch, Kingswood Software

; ===========================================================================

; Segment type: Pure data
                data ; RAM
RAM_DISP4_D2D1: ds 1                    ; DATA XREF: Check_TESTSW:loc_7442↓o
                                        ; Check_TESTSW+21↓w ...
                                        ; layout  display  D6 d5 d4 d3 d2 d1 (BCD coded)
                                        ; the displays can display 0..E  F =blank
RAM_DISP4_D4D3: ds 1
RAM_DISP4_D6D5: ds 1                    ; DATA XREF: NMI_REGULAR+C48↓w
RAM_PL4:                                ; player 4 indication
                align 2
RAM_DISP3_D2D1: ds 1
RAM_DISP3_D4D3: ds 1
RAM_DISP3_D6D5: ds 1
RAM_PL3:        ds 1                    ; player 3 indication
RAM_DISP2_D2D1: ds 1                    ; DATA XREF: NMI_REGULAR+C2E↓w
RAM_DISP2_D4D3: ds 1                    ; DATA XREF: NMI_REGULAR+C2C↓w
RAM_DISP2_D6D5: ds 1                    ; DATA XREF: NMI_REGULAR+C2A↓w
RAM_PL2:                                ; player 2 indication
                align 2
RAM_DISP1_D2D1: ds 1                    ; DATA XREF: NMI_REGULAR+C38↓w
RAM_DISP1_D4D3: ds 1                    ; DATA XREF: NMI_REGULAR+C36↓w
RAM_DISP1_D6D5: ds 1                    ; DATA XREF: NMI_REGULAR+C34↓w
RAM_PL1:                                ; player 1 indication
                align 2
RAM_SW_SCAN_PTR_MSB:ds 1                ; DATA XREF: SWITCHSCANNER+3↓w
                                        ; SWITCHSCANNER:SCANSWITCHES↓r ...
byte_11:        ds 1                    ; DATA XREF: SWITCHSCANNER+41↓r
                                        ; SWITCHSCANNER+45↓w ...
RAM_SW_VAL_PTR_MSB:ds 1                 ; DATA XREF: SWITCHSCANNER+8↓w
                                        ; SWITCHSCANNER+2C↓r ...
RAM_SW_VAL_PTR_LSB:ds 1                 ; DATA XREF: SWITCHSCANNER+3E↓w
RAM_XSAVE1:     ds 1                    ; DATA XREF: LAMP_TABLE_INDEXER↓w
                                        ; LAMP_TABLE_INDEXER+2E↓r ...
byte_15:        ds 1                    ; DATA XREF: SolenoidTest+1C↓w
                                        ; SolenoidTest+2A↓w
byte_16:        ds 1                    ; DATA XREF: Check_TESTSW-252↓w
                                        ; Check_TESTSW:loc_742C↓r ...
RAM_PLAYERINTERVALCNTR:ds 1             ; DATA XREF: ADJUSTPLAYER_ATTRACTMODE↓w
                                        ; ADJUSTPLAYER_ATTRACTMODE+7↓w
                                        ; hold the interval timer used in attract mode  when the player indication 'scans' all player lights
RAM_XSAVE:      ds 2                    ; DATA XREF: MAIN+2↓w
                                        ; MAIN+3F↓r
                                        ; saves X register
RAM_TableOffset_MSB:ds 2                ; DATA XREF: PROGRAMSTATUSCHECK+17↓w
                                        ; PROGRAMSTATUSCHECK+19↓r ...
RAM_DISP_CurrentBallDisplay:ds 1        ; DATA XREF: Check_TESTSW-4D3↓w
                                        ; Check_TESTSW-255↓w ...
                                        ; holds the current ball in play
RAM_DISP_CreditsDisplay:ds 1            ; DATA XREF: InitDisplays↓o
                                        ; Update_Credits1+E↓w ...
                                        ; contains number of games to play (BCD)
                ds 1
unk_1F:         ds 1
;------------------
;SCORE STORE AREA
;------------------
score4_D2D1:    ds 1                    ; DATA XREF: LIGHTTARGETLIGHTS+2↓o
score4_D4D3:    ds 1
score4_D6D5:    ds 1
unk_23:         ds 1
score3_D2D1:    ds 1                    ; DATA XREF: LIGHTDROPLIGHTS+13↓o
score3_D4D3:    ds 1
score3_D6D5:    ds 1                    ; DATA XREF: LIGHTDROPLIGHTS+30↓o
                ds 1
score2_D2D1:    ds 1                    ; DATA XREF: LIGHTDROPLIGHTS:loc_74C5↓o
score2_D4D3:    ds 1                    ; DATA XREF: LIGHTDROPLIGHTS+57↓o
score2_D6D5:    ds 1                    ; DATA XREF: sub_7597+17↓o
                ds 1
score1_D2D1:    ds 1
score1_D4D3:    ds 1
score1_D6D5:    ds 1
                ds 1
;-------------------
; LAMPS
;-------------------
RAM_LAMP00:     ds 1                    ; DATA XREF: Check_TESTSW-4BD↓o
                                        ; topleftrollover_sw↓r ...
                                        ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL
RAM_LAMP01:     ds 1                    ; DATA XREF: topleftrollover_sw:lowerrightrollover_sw↓r
                                        ; bit 0   B   J1-C    RIGHT CAPTIVE BALL TARGET
                                        ; bit 1   B   J1-N    LEFT CAPTIVE BALL TARGET
                                        ; bit 2   B   J1-Y    RIGHT LOWER CENTER ROLLOVER
                                        ; bit 3   B   J2-2    CENTER DROP TARGET 3K
RAM_LAMP02:     ds 1                    ; bit 0   C   J1-D    TILT
                                        ; bit 1   C   J1-P    L INE
                                        ; bit 3   C   J2-3    SAME PERSON SHOOTS AGAIN
RAM_LAMP03:     ds 1                    ; bit 0   D   J1-E    DOUBLE BONUS
                                        ; bit 1   D   J1-R    BONUS 3K
                                        ; bit 2   D   J1-16   BONUS 7K
                                        ; bit 3   D   J2-4    BONUS 20K
RAM_LAMP04:     ds 1                    ; DATA XREF: topleftrollover_sw:upperleftrollover_sw↓r
                                        ; ROM:rightspinner_sw↓r ...
                                        ; bit 0   A   J1-F    RIGHT SPINNER
                                        ; bit 1   A   J1-S    P IPE
                                        ; bit 2   A   J1-17   LEFT UPPER CENTER ROLLOVER
                                        ; bit 3   A   J2-5    LEFT EXTRA BALL
                                        ;         A    J13-1   STROBE A
                                        ;         A    J1-1    ILLUMINATION
RAM_LAMP05:     ds 1                    ; DATA XREF: ROM:leftspinner_sw↓r
                                        ; bit 0   B   J1-H    RIGHT DROP TARGET 3K
                                        ; bit 1   B   J1-9    CENTER CAPTIVE BALL TARGET
                                        ; bit 2   B   J1-18   LEFT SPINNER
                                        ; bit 3   B   J2-6    CENTER DROP TARGET 5K
                                        ;         B   J13-2   STROBE B
                                        ;         B   J1-A    ILLUMINATION
RAM_LAMP06:     ds 1                    ; bit 0   C   J1-J    MATCH
                                        ; bit 1   C   J1-10   L I NE
                                        ; bit 3   C   J13-3   STROBE C
                                        ;         C   J2-1    ILLUMINATION
RAM_LAMP07:     ds 1                    ; DATA XREF: Check_TESTSW-4B7↓o
                                        ; Check_TESTSW:loc_7400↓o
                                        ; bit 0   D   J1-2    TRIPLE BONUS
                                        ; bit 1   D   J1-11   BONUS 4K
                                        ; bit 2   D   J1-20   BONUS 8K
                                        ; bit 3   D   J2-8    BONUS 30K
                                        ;         D   J13-4   STROBE D
                                        ;         D   J2-A    ILLUMINATION
RAM_LAMP08:     ds 1                    ; DATA XREF: topleftrollover_sw:upperrightrollover_sw↓r
                                        ; HOLEKICKERCHECK+3B↓r
                                        ; bit 0   A   J1-3    RIGHT SPECIAL
                                        ; bit 1   A   J1-12   P I PE
                                        ; bit 2   A   J1-21   UPPER CENTER ROLLOVER
RAM_LAMP09:     ds 1                    ; DATA XREF: leftthumperbumper_sw+4↓r
                                        ; bit 0   B   J1-4    LEFT THUMPER BUMPER
                                        ; bit 1   B   J1-13   CENTER DROP TARGET 10K
                                        ; bit 2   B   J1-22   LEFT DROP TARGET 3K
RAM_LAMP0A:     ds 1                    ; bit 0   C   J1-5    RIGHT DROP TARGET 5K
                                        ; bit 1   C   J1-14   LI N E
RAM_LAMP0B:     ds 1                    ; bit 0   D   J1-6    BONUS 1K
                                        ; bit 1   D   J1-15   BONUS 5K
                                        ; bit 2   D   J2-C    BONUS 9K
RAM_LAMP0C:     ds 1                    ; DATA XREF: Check_TESTSW-4B3↓o
                                        ; topleftrollover_sw:uppercenterrollover_sw↓r ...
                                        ; bit 0   A   J1-7    RIGHT EXTRA BALL
                                        ; bit 1   A   J1-T    PI P E
                                        ; bit 2   A   J2-D    RIGHT UPPER CENTER ROLLOVER
RAM_LAMP0D:     ds 1                    ; DATA XREF: topleftrollover_sw:lowerleftrollover_sw↓r
                                        ; leftthumperbumper_sw+10↓r
                                        ; bit 0   B   J1-8    RIGHT THUMPER BUMPER
                                        ; bit 1   B   J1-U    LEFT LOWER CENTER ROLLOVER
                                        ; bit 2   B   J2-E    LEFT DROP TARGET 5K
RAM_LAMP0E:     ds 1                    ; bit 0   C   J1-K    GAME OVER
                                        ; bit 1   C   J1-V    LIN E
RAM_LAMP0F:     ds 1                    ; DATA XREF: NMI_REGULAR:loc_7C15↓o
                                        ; bit 0   D   J1-L    BONUS 2K
                                        ; bit 1   D   J1-W    BONUS 6K
                                        ; bit 2   D   J2-H    BONUS 10K
; -------------------
;  SWITCH RAM
; -------------------
RAM_SW1_1_TEST_SW:ds 1                  ; DATA XREF: LIGHTTARGETLIGHTS+7↓o
                                        ; LIGHTTARGETLIGHTS+C↓o ...
RAM_COIN1SW:    ds 1                    ; DATA XREF: RAMCOINS1WSUB+2↓r
                                        ; GET_CABINETSWITCHES+B↓w
                                        ; holds the COIN1 switch status
RAM_COIN2SW:    ds 1                    ; DATA XREF: RAMCOINS1WSUB:RAMCOINSW2SUB↓r
                                        ; GET_CABINETSWITCHES+12↓w
                                        ; holds the COIN2 switch status
RAM_STARTSW:    ds 1                    ; DATA XREF: Check_TESTSW+3B↓r
                                        ; GET_CABINETSWITCHES+19↓w ...
                                        ; holds the START switch status
RAM_SLAMSW:     ds 1                    ; DATA XREF: Check_TESTSW:loc_76BD↓r
                                        ; Check_TESTSW+A0↓r ...
                                        ; holds the SLAM switch status
RAM_TILTCABINETSW:ds 1                  ; DATA XREF: Check_TESTSW+4E↓r
                                        ; Check_TESTSW+A2↓r ...
                                        ; holds the TILT CABINET switch status
RAM_TILTPENDULUMSW:ds 1                 ; DATA XREF: Check_TESTSW+56↓r
                                        ; Check_TESTSW+A4↓r ...
                                        ; holds the TILT PENDULUM switch status
;-------------------
; PLAYFIELD SWITCH RAM
;-------------------
RAM_SW_DEBOUNCE:ds 6                    ; DATA XREF: SWITCHSCANNER+5↓o
                                        ; hold the scanned (playfield) switchvalues & replay hexswitch (motherboard) in memory 2020h
RAM_SW_STATUS:  ds 6
RAM_SW_LATCH:   ds 6                    ; DATA XREF: Check_TESTSW-4A8↓o
;-----------------
; SOLENOID COUNTERS
;-----------------
RAMLEFTTHUMPERBUMPER_SW:ds 1            ; DATA XREF: leftthumperbumper_sw+2↓w
                                        ; SolenoidTest↓o
                                        ; LEFT THUMBER BUMPER switch status
RAMRIGHTTHUMBERBUMPER_SW:ds 1           ; DATA XREF: leftthumperbumper_sw+E↓w
RAMLEFTSLINGSHOT_SW:ds 1                ; DATA XREF: rightslingshot_sw+18↓w
RAM_RIGHTSLINGSHOT_SW:ds 1              ; DATA XREF: rightslingshot_sw+A↓w
RAM_OUTHOLEKICKER_SW:ds 1               ; DATA XREF: Check_TESTSW-4AD↓w
RAM_LEFTDROPTARGETSW:ds 1               ; DATA XREF: DROPTARGET_RESET+A↓w
RAM_CENTERDROPTARGET_SW:ds 1            ; DATA XREF: DROPTARGET_RESET+12↓w
RAM_RIGHTDROPTARGET_SW:ds 1             ; DATA XREF: DROPTARGET_RESET+1A↓w
RAM_LEFTHOLEKICKER_SW:ds 1              ; DATA XREF: CLEARBALL+7↓w
                                        ; HOLEKICKERCHECK+2B↓w
RAM_RIGHTHOLEKICKER_SW:ds 1             ; DATA XREF: CLEARBALL+10↓w
                                        ; HOLEKICKERCHECK+48↓w
RAM_LOCKOUTCOIL:ds 1                    ; DATA XREF: sub_7A71:loc_7A7D↓w
                                        ; set to $FF if maximum credits reached
RAM_FLIPPERSENABLE:ds 1                 ; DATA XREF: Check_TESTSW-4D9↓w
                                        ; Check_TESTSW-26B↓w ...
RAM_EXTRABALLMETER:ds 1                 ; DATA XREF: EXTRABALL+2↓w
RAM_REPLAYMETER:ds 1                    ; DATA XREF: sub_7BB4+B↓w
                                        ; sub_7BD6+2↓w
RAM_PLAYSMETER: ds 1                    ; DATA XREF: sub_7752+4C↓w
RAM_SPECIALSMETER:ds 1                  ; DATA XREF: CHECKSPECIALFEATURE+6↓w
RAM_TIMEMETER:  ds 1                    ; DATA XREF: WAIT4PHASECHANGE+19↓w
RAM_COINMETER:  ds 1                    ; DATA XREF: sub_7A5A+11↓w
;-------------------
; ATTRACT MODE PARAMETERS
;-------------------
RAM_TIMEOUT_60S:ds 2                    ; DATA XREF: Check_TESTSW-662↓r
                                        ; Check_TESTSW-65D↓w ...
RAM_ATTRACTMODETABLEINDEX:ds 2          ; DATA XREF: INIT_ATTRACTMODE+3↓w
                                        ; ATTRACTMODE:ATTRACTMODE1↓r ...
RAM_LOOPINDEX:  ds 1                    ; DATA XREF: ATTRACTMODE+1A↓w
                                        ; ATTRACTMODE+21↓w
RAM_FRAMETIME:  ds 1                    ; DATA XREF: ATTRACTMODE+36↓w
                                        ; ATTRACTMODE:ATTRACTMODE11↓r
RAM_ATTRACTTIMER:ds 1                   ; DATA XREF: INIT_ATTRACTMODE+B↓w
                                        ; ATTRACTMODE↓r ...
RAM_BACKGROUNDINDEX:ds 1                ; DATA XREF: INIT_ATTRACTMODE+8↓w
                                        ; ATTRACTMODE+3D↓r ...
                ds 1
RAM_BACKGROUNDFRAME:ds 1                ; DATA XREF: BACKGROUNDPROCES+1F↓w
                                        ; BACKGROUNDPROCES:BACKGROUNDPROCES6↓r
RAM_BACKGROUNDTIMER:ds 1                ; DATA XREF: INIT_ATTRACTMODE+D↓w
                                        ; BACKGROUNDPROCES↓r ...
;-------------------
;  MISC. TEMPS
;-------------------
NMITMP:         ds 1                    ; DATA XREF: ROM:7061↓w
                                        ; ROM:7063↓r
                                        ; INT. TEMP
MSTMP:          ds 1                    ; DATA XREF: ROM:7067↓r
                                        ; MATCH TEMP
                ds 1
                ds 1
RAM_PROMERR:    ds 1                    ; DATA XREF: NMI_REGULAR:TESTPROM7800_END↓w
                                        ; NMI_REGULAR+C46↓r
                                        ; holds PROM check during TEST 1
                                        ;
                                        ; FF= (blank) no PROM failures
                                        ; 1F= failure in PROM 7000-77FF
                                        ; F2= failure in PROM 7800-7FFF
                                        ; 12= failure in both PROM's
                ds 1
                ds 1
byte_7D:        ds 1
                ds 1
                ds 1
;-------------------
; SOLENOID AREA
;-------------------
RAM_SOLB1:      ds 1                    ; DATA XREF: OUTPUTLATCH+22↓r
RAM_Second_Replay_Level:ds 1            ; DATA XREF: Replay_Rotary_SW_scan:Replay_Rotary_SW_scan1b↓w
                                        ; Replay_Rotary_SW_scan+2F↓w ...
                                        ; hold the second replay level
RAM_First_Replay_Level:ds 1             ; DATA XREF: Replay_Rotary_SW_scan+17↓w
                                        ; OUTPUTLATCH+EA↓r ...
                                        ; hold the first replay level
                align 2
RAM_SOLB2:      ds 1                    ; DATA XREF: OUTPUTLATCH+64↓r
RAM_LEFTCOINTMODE:ds 2                  ; DATA XREF: SW2_6SUB+1B↓w
                                        ; RAMCOINS1WSUB+C↓o ...
                align 2
RAM_SOLB3:      ds 1                    ; DATA XREF: OUTPUTLATCH+70↓r
RAM_RIGHTCOINMODE:ds 2                  ; DATA XREF: SW2_6SUB+23↓w
                                        ; RAMCOINS1WSUB+1D↓o ...
                ds 1
RAM_SOLB4:      ds 1
;--------------------

RAM_latch108D:  ds 1
RAM_latch108E:  ds 1                    ; DATA XREF: Check_TESTSW+75↓w
                align 2
byte_90:        ds 1                    ; DATA XREF: Update_Credits+1↓r
                                        ; Update_Credits+3↓w
                align 2
byte_92:        ds 1                    ; DATA XREF: sub_7752+47↓w
byte_93:        ds 1                    ; DATA XREF: CHECKSPECIALFEATURE+3B↓r
byte_94:        ds 1                    ; DATA XREF: CHECKSPECIALFEATURE+2F↓w
                                        ; CHECKSPECIALFEATURE+3D↓r
byte_95:        ds 1                    ; DATA XREF: CHECKSPECIALFEATURE+3F↓r
byte_96:        ds 1                    ; DATA XREF: CHECKSPECIALFEATURE:loc_796D↓w
                                        ; CHECKSPECIALFEATURE+41↓r
                ds 1
byte_98:        ds 1                    ; DATA XREF: EXTRABALL+6↓w
                ds 1
RAM_EXTRA25K_SOUND:ds 1                 ; DATA XREF: CHECKEXTRABALL+10↓w
                align 2
byte_9C:        ds 1                    ; DATA XREF: B_ike_targetsw+45↓w
                ds 1
byte_9E:        ds 1                    ; DATA XREF: B_ike_targetsw+2B4↓r
                                        ; B_ike_targetsw+2B6↓w
RAM_TELLER000:  ds 1                    ; DATA XREF: ROM:loc_73B2↓w
                                        ; COLLECTBONUS+A↓r
RAM_TSCORE1000: ds 1                    ; DATA XREF: B_ike_targetsw:drainandspinnerlanes_sw↓w
                                        ; leftthumperbumper_sw:INC_1000_TSCORE↓w ...
                                        ;  1 = 1000
RAM_TELLER002:  ds 1                    ; DATA XREF: ROM:spinners↓w
RAM_TSCORE100:  ds 1                    ; DATA XREF: topleftrollover_sw+53↓r
                                        ; topleftrollover_sw+57↓w ...
                                        ; 1 = 100
RAM_TSCORE100_1:ds 1                    ; DATA XREF: NMI_REGULAR+C94↓w
RAM_TSCORE10:   ds 1                    ; DATA XREF: topleftrollover_sw:ADD_50_TSCORE↓r
                                        ; topleftrollover_sw+5E↓w ...
                                        ; 1 = 10
byte_A5:        ds 1                    ; DATA XREF: Check_TESTSW-249↓w
                ds 1
;
;-------------------
; FLAGS + VARIABLES
;-------------------
RAM_BALL_Per_Game:ds 1                  ; DATA XREF: Replay_Rotary_SW_scan:HEXSWSC005↓w
                                        ; Check_TESTSW-285↓r ...
                                        ; hold the number of balls per game
RAM_Max_Credits:ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+3F↓w
                                        ; sub_7A71+7↓r ...
                                        ; holds the maximum number of credits possible
RAM_NUMBEROFPLAYERS:ds 1                ; DATA XREF: Check_TESTSW-28B↓r
                                        ; sub_7752+8↓r ...
                                        ; hold the number of players
RAM_CURRENTPLAYER:ds 1                  ; DATA XREF: ADJUSTPLAYER_ATTRACTMODE+C↓r
                                        ; ADJUSTPLAYER_ATTRACTMODE+14↓w ...
                                        ; holds the current player #
RAM_CURRENTBALL:ds 1                    ; DATA XREF: Check_TESTSW-4D7↓r
                                        ; Check_TESTSW-287↓r ...
                                        ; holds the current ball number
RAM_BIKECITY:   ds 1                    ; DATA XREF: B_ike_targetsw:bikecitybonus↓r
                                        ; B_ike_targetsw+20↓r ...
                                        ; hold the BIKE & CITY switch status where:
                                        ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
PMEM:           ds 4                    ; memory area
RAM_GAME_COINFLAG:ds 1                  ; DATA XREF: Check_TESTSW-271↓w
                                        ; Check_TESTSW+89↓r ...
                                        ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
RAM_SCOREFLAG:  ds 1                    ; DATA XREF: Check_TESTSW-4EE↓w
                                        ; HOLEKICKERCHECK-50E↓r ...
                                        ;  0 = no score, 1 = scored
RAM_TESTFLAG:   ds 1                    ; DATA XREF: Check_TESTSW+8↓r
                                        ; Check_TESTSW+B↓w ...
                                        ; hold the test sequence number
                                        ; 1 = lamp, replay level and rom test sequence
                                        ;
                                        ; 2 = solenoid test sequence
                                        ;
                                        ; 3 = switch test sequence
RAM_BONUSMULTIPLIER:ds 1                ; DATA XREF: Check_TESTSW-4EC↓w
                                        ; B_ike_targetsw:bikecitybonus1↓r ...
                                        ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus
RAM_BONUSADVANCESTATE:ds 1              ; DATA XREF: Check_TESTSW-4EA↓w
                                        ; B_ike_targetsw:BONUSADVANCE↓r ...
RAM_LOCKOUTFLAG:ds 1                    ; DATA XREF: Check_TESTSW+34↓r
                                        ; Check_TESTSW+7F↓w ...
                                        ; lock-out coil flag
RAM_CREDITS_CNTR:ds 1                   ; DATA XREF: sub_7752↓r
                                        ; sub_7A71+5↓r ...
                                        ; RAM counter holding the # of credits (games)
RAM_MATCHSEED:  ds 1                    ; DATA XREF: Check_TESTSW-257↓r
                                        ; WAIT4PHASECHANGE+22↓r ...
RAM_PLAYERUPFLASH:ds 1                  ; DATA XREF: sub_79C3+4↓w
                                        ; sub_79C3+9↓r ...
RAM_XTRABALLFLASH:ds 1                  ; DATA XREF: sub_7990+6↓w
                                        ; sub_7990+B↓r ...
RAM_LAMPFLASH:  ds 1                    ; DATA XREF: CHECKEXTRABALL+3↓w
                                        ; CHECKSPECIALFEATURE+32↓w ...
                                        ; lamp to flash
RAM_LAMPFLASHCNTR:ds 1                  ; DATA XREF: CHECKEXTRABALL+7↓w
                                        ; CHECKSPECIALFEATURE+36↓w ...
RAM_PHASECNTR:  ds 1                    ; DATA XREF: WAIT4PHASECHANGE+5↓r
                                        ; WAIT4PHASECHANGE+C↓w
RAM_DROPCOUNTER:ds 1                    ; DATA XREF: Check_TESTSW-4B1↓w
                                        ; leftdroptarget_sw↓r ...
RAM_DROPRESETCNTR:ds 1                  ; DATA XREF: sub_7590↓r
                                        ; sub_7590+5↓w ...
RAM_ALTERNATIONFLAG:ds 1                ; DATA XREF: Check_TESTSW-4DC↓w
                                        ; sub_74D9+20↓w ...
RAM_EXTRABALLFLAG:ds 1                  ; DATA XREF: leftdroptarget_sw:droptargets2↓r
                                        ; Check_TESTSW-294↓r ...
RAM_LEFTDROPTARGETSTATE:ds 1            ; DATA XREF: Check_TESTSW-4E8↓w
                                        ; topleftrollover_sw:loc_7234↓w ...
RAM_CENTERDROPTARGETSTATE:ds 1          ; DATA XREF: Check_TESTSW-4E6↓w
                                        ; topleftrollover_sw:loc_721D↓w ...
RAM_RIGHTDROPTARGETSTATE:ds 1           ; DATA XREF: Check_TESTSW-4E4↓w
                                        ; topleftrollover_sw:loc_724B↓w ...
RAM_RIGHTSLINGSHOTDELAY:ds 1            ; DATA XREF: rightslingshot_sw↓r
                                        ; rightslingshot_sw+6↓w ...
                                        ; initial value of counter is set to $1E00
RAM_LEFTSLINGSHOTDELAY:ds 1             ; DATA XREF: rightslingshot_sw:leftslingshot_sw↓r
                                        ; rightslingshot_sw+14↓w ...
RAM_CAPTIVETARGETFLAG:ds 1              ; DATA XREF: Check_TESTSW-4E2↓w
                                        ; leftcaptiveballtarget_sw:captivetargets↓r ...
RAM_DROPTARGETSTATUS:ds 1               ; DATA XREF: Check_TESTSW-4E0↓w
                                        ; leftcaptiveballtarget_sw+1D↓r ...
RAM_COIN1COUNTER:ds 1                   ; DATA XREF: Check_TESTSW-26F↓w
                                        ; RAMCOINS1WSUB+A↓r ...
                                        ; holds the number of coins #1
RAM_COIN2COUNTER:ds 1                   ; DATA XREF: Check_TESTSW-26D↓w
                                        ; RAMCOINS1WSUB+1B↓r ...
                                        ; holds the number of coins #2
RAM_COINDELAY:  ds 1                    ; DATA XREF: sub_7A5A↓r
                                        ; sub_7A5A+4↓w ...
RAM_COINCOUNT:  ds 2                    ; DATA XREF: sub_7800+2F↓r
                                        ; sub_7800+31↓w ...
RAM_MINUTETIMER:ds 2                    ; DATA XREF: WAIT4PHASECHANGE+12↓r
                                        ; WAIT4PHASECHANGE:loc_78A6↓w ...
                                        ; minute timer
RAM_RAM_Status: ds 2                    ; DATA XREF: PROGRAMSTATUSCHECK↓r
                                        ; ROM:NMI_VECTORSTART↓r ...
                                        ; RAM test location
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
unk_EE:         ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
unk_FC:         ds 1
                ds 1
                ds 1
                ds 1
; end of 'RAM'

; ===========================================================================

; Segment type: Regular
                code ; LATCHES
                org $1000
LAMPLATCH1000:  ds 1
                ds 1
                ds 1
                ds 1
LAMPLATCH1004:  ds 1
                ds 1
                ds 1
                ds 1
LAMPLATCH1008:  ds 1
                ds 1
                ds 1
                ds 1
LAMPLATCH100C:  ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
OUTLATCH1080:   ds 1                    ; DATA XREF: OUTPUTLATCH+29↓w
                                        ; NMI_REGULAR+BB3↓w
                                        ; bit 4 = coin control
                                        ; bit 5 = lockout
                                        ; bit 6 = right outhole kicker
                                        ; bit 7 = right thumper bumper
                ds 1
                ds 1
                ds 1
OUTLATCH1084:   ds 1                    ; DATA XREF: OUTPUTLATCH+6D↓w
                                        ; NMI_REGULAR+BB6↓w
                                        ; bit 4 = left outhole kicker
                                        ; bit 5 = left thumper bumper
                                        ; bit 6 = extra ball meter
                                        ; bit 7 = outhole kicker
                ds 1
                ds 1
                ds 1
OUTLATCH1088:   ds 1                    ; DATA XREF: OUTPUTLATCH+7B↓w
                                        ; NMI_REGULAR+BB9↓w
                                        ; bit 4 = not used
                                        ; bit 5 = not used
                                        ; bit 6 = flipper control
                                        ; bit 7 = center drop target
                ds 1
                ds 1
                ds 1
OUTLATCH108C:   ds 1                    ; DATA XREF: NMI_REGULAR+BBC↓w
; end of 'LATCHES'                      ; bit 0 = replaymeter*
                                        ; bit 1 = totalmeter*
                                        ; bit 2 = specialcounter*
                                        ; bit 3 = timecounter*
                                        ; bit 4 = left slingshot
                                        ; bit 5 = right slingshot
                                        ; bit 6 = left drop target
                                        ; bit 7 = right drop target
                                        ;
                                        ; * requires optional meter board
; ===========================================================================

; Segment type: Regular
                code ; DIPSWITCHSW2
                org $2000
SW2_toggle4:    ds 1                    ; DATA XREF: SW2_6SUB+7↓o
                                        ; WAIT4PHASECHANGE↓r
                                        ; Coins per Game Settings (SW2 3,4,5,6)
SW2_toggle3:    ds 1                    ; Coins per Game Settings (SW2 3,4,5,6)
SW2_toggle2:    ds 1                    ; DATA XREF: Check_TESTSW-264↓r
                                        ; Match Feature Setting:
                                        ; OFF = Match OFF
                                        ; ON  = Match ON
SW2_toggle1:    ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+43↓r
                                        ; Balls per Game Setting:
                                        ; OFF = 3 Balls
                                        ; ON  = 5 Balls
SW2_toggle8:    ds 1                    ; DATA XREF: CHECKSPECIALFEATURE+D↓o
                                        ; SPECIAL FEATURE AWARD setting (SW2 7-8)
                                        ; $ Replay   = 7 ON , 8 ON
                                        ; Extra ball = 7 ON , 8 OFF
                                        ; 50,000     = 7 OFF, 8 ON
                                        ; 100,000    = 7 OFF, 8 OFF
SW2_toggle7:    ds 1                    ; SPECIAL FEATURE AWARD setting (SW2 7-8)
SW2_toggle6:    ds 1                    ; DATA XREF: SW2_6SUB↓o
                                        ; Coins per Game Settings (SW2 3,4,5,6)
SW2_toggle5:    ds 1                    ; Coins per Game Settings (SW2 3,4,5,6)
; end of 'DIPSWITCHSW2'

; ===========================================================================

; Segment type: Pure data
                data ; DIPSWITCHSW1
                org $2008
SW1_toggle4:    ds 1                    ; DATA XREF: leftcaptiveballtarget_sw+18↓r
                                        ; sub_74D9+1B↓r
                                        ; Special Feature Difficulty Setting:
                                        ; OFF = Conserative (Special lights when Captive Ball Targets are hit and all Drop targets are down)
                                        ;
                                        ; ON  = Liberal (Speical lights when all Captive are hit)
                                        ;
                                        ;
                                        ; also testswitch on coindoor
SW1_toggle3:    ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+19↓r
                                        ; OFF = Only 1st level Replay/Add-a-Ball feature is active
                                        ; ON  = Both levels Replay/Add-a-Ball feature are active
SW1_toggle2:    ds 1                    ; DATA XREF: CHECKEXTRABALL+9↓r
                                        ; Extra Ball Sequence Reward
                                        ; OFF = 25.000 points
                                        ; ON  = Extra Ball
SW1_toggle1_SW_TEST:ds 1                ; DATA XREF: GET_CABINETSWITCHES↓r
                                        ; NMI_REGULAR+BD8↓r
                                        ; SW-1 toggle1 and TEST button are connected in parallel so function is the same, so even if only power connected to board you can test the board by using swithc 1-1 as testbutton
SW1_toggle8:    ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+27↓r
                                        ; sub_7BB4+D↓r
                                        ; OFF = Add-a-ball ON = Replay
SW1_toggle7:    ds 1
SW1_toggle6:    ds 1                    ; DATA XREF: Replay_Rotary_SW_scan:Get_MaxCredits_Per_Game↓o
                                        ; Maximum Credits per Game Settings (SW1 5,6)
SW1_toggle5:    ds 1                    ; Maximum Credits per Game Settings (SW1 5,6)
; end of 'DIPSWITCHSW1'

; ===========================================================================

; Segment type: Pure data
                data ; SwitchArea
                org $2010
COIN1_SW:       ds 1                    ; DATA XREF: GET_CABINETSWITCHES+7↓r
                                        ; NMI_REGULAR+C83↓o
                                        ; left coin switch (1)
COIN2_SW:       ds 1                    ; DATA XREF: GET_CABINETSWITCHES+E↓r
                                        ; right coin switch (2)
START_SW:       ds 1                    ; DATA XREF: GET_CABINETSWITCHES+15↓r
                                        ; start switch (3)
SLAM_SW:        ds 1                    ; DATA XREF: GET_CABINETSWITCHES+1C↓r
                                        ; slam switch (4)
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
SLAMCABINET_SW: ds 1                    ; DATA XREF: GET_CABINETSWITCHES+23↓r
                                        ; SWITCHSCANNER↓o
                                        ; slam (cabinet) switch (17)
TILTPENDULUM_SW:ds 1                    ; DATA XREF: GET_CABINETSWITCHES+2A↓r
                                        ; tilt (pendulum) switch (18)
TOPLEFTROLLOVER_SW:ds 1                 ; top left rollover switch (19)
TOPRIGHTROLLOVER_SW:ds 1
UPPERLEFTROLLOVER_SW:ds 1
UPPERRIGHTROLLOVER_SW:ds 1
LEFTTHUMPERBUMPER_SW:ds 1
RIGHTTHUMPERBUMPER_SW:ds 1              ; right tumber bumper switch (24)
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
UPPERCENTERROLLOVER_SW:ds 1
LOWERLEFTROLLOVER_SW:ds 1
LOWERRIGHTROLLOVER_SW:ds 1
DRAINANDSPINNERLANES_SW:ds 1
BLANE_SW:       ds 1                    ; (b)ike swtich (37)
ILANE_SW:       ds 1                    ; b(i)ke switch (38)
KLANE_SW:       ds 1                    ; bi(k)e switch (39)
ELANE_SW:       ds 1                    ; bik(e) switch (40)
OUTHOLEKICKER_SW:ds 1                   ; DATA XREF: Check_TESTSW+97↓r
                                        ; HOLEKICKERCHECK+9↓r
                                        ; outhole kicker switch (41)
RIGHTSLINGSHOT_SW:ds 1
LEFTSLINGSHOT_SW:ds 1
RIGHTHOLEKICKER_SW:ds 1                 ; DATA XREF: CLEARBALL:HOLEKICKERSWSUB1↓r
                                        ; HOLEKICKERCHECK:RIGHTHOLEKICKERSUB↓r
LEFTHOLEKICKER_SW:ds 1                  ; DATA XREF: CLEARBALL↓r
                                        ; HOLEKICKERCHECK:LEFTHOLEKICKERSUB↓r
TENPOINT_SW:    ds 1
FIFTYPOINT_SW:  ds 1
                ds 1
LEFTCAPTIVEBALLTARGET_SW:ds 1
CENTERCAPTIVETARGET_SW:ds 1
RIGHTSPINNER_SW:ds 1
RIGHTCAPTIVETARGET_SW:ds 1
LEFTDROPTARGET_SW:ds 1
CENTERDROPTARGET_SW:ds 1
LEFTSPINNER_SW: ds 1
RIGHTDROPTARGET_SW:ds 1
CLANETARGET_SW: ds 1                    ; (c)ity switch (57)
ILANETARGET_SW: ds 1                    ; c(i)ty switch (58)
TLANETARGET_SW: ds 1                    ; ci(t)y switch (59)
YLANETARGET_SW: ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+9↓o
                                        ; cit(y) switch (60)
HEXCODED_SW1:   ds 1                    ; DATA XREF: NMI_REGULAR+C9C↓o
                                        ; replay bit 0
HEXCODED_SW2:   ds 1                    ; replay bit 1
HEXCODED_SW4:   ds 1                    ; replay bit 2
HEXCODED_SW8:   ds 1                    ; DATA XREF: Replay_Rotary_SW_scan+1↓o
; end of 'SwitchArea'                   ; replay bit 3

; ===========================================================================

; Segment type: Pure data
                data ; AUDIOArea
                org $3000
Audio_Enable:   ds 1                    ; DATA XREF: OUTPUTLATCH+56↓w
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
; end of 'AUDIOArea'

; ===========================================================================

; Segment type: Pure data
                data ; WATCHDOGArea
                org $4000
WakeUP_Reset:   ds 1                    ; DATA XREF: WAIT4PHASECHANGE+9↓w
                                        ; NMI_REGULAR+C01↓w ...
                                        ; during testmode1 contains the ROMcheck
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
; end of 'WATCHDOGArea'

; ===========================================================================

; Segment type: Regular
                code ; Meter
                org $5000
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
; end of 'Meter'

; ===========================================================================

; Segment type: Pure data
                data ; ATARIMTRArea
                org $5080
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
; end of 'ATARIMTRArea'

; ===========================================================================

; Segment type: Pure data
                data ; SOUNDRESArea
                org $6000
Audio_Disable:  ds 2                    ; DATA XREF: OUTPUTLATCH+4F↓w
                                        ; OUTPUTLATCH:loc_7B17↓w
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
                ds 1
; end of 'SOUNDRESArea'

; ===========================================================================

; Segment type: Pure code
                code ; ROM
                org $7000
                db $A6                  ;  checksum first ROM
; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR Check_TESTSW
;   ADDITIONAL PARENT FUNCTION NMI_REGULAR

Entry_mainloop:                         ; CODE XREF: Check_TESTSW:loc_745C↓J
                                        ; Check_TESTSW+B9↓J ...
                jsr     INIT_ATTRACTMODE

Main_loop:                              ; CODE XREF: Check_TESTSW:Main_loopend↓j
                jsr     CLEARBALL
                bsr     Replay_Rotary_SW_scan ; routine to scan the rotary switch
                jsr     ATTRACTMODE     ; ATTRACT MODE routine
                jsr     BACKGROUNDPROCES
                jsr     ADJUSTPLAYER_ATTRACTMODE ; routine to adjust player so in attract mode the player lights  blinks sequentialy (interval timed)
                                        ;
                jsr     MAIN
                ldx     <RAM_TIMEOUT_60S ; get timeout counter
                beq     Main_loopend    ; if already elapsed (=0000) then end
                dex                     ; otherwise decrement timeoutcounter
                stx     <RAM_TIMEOUT_60S ; store timeoutcounter
                bne     Main_loopend    ; if not elapsed the end
                jsr     Blank_RAMDisplays ; otherwise blank display ater appr. 60 seconds

Main_loopend:                           ; CODE XREF: Check_TESTSW-660↑j
                                        ; Check_TESTSW-65B↑j
                bra     Main_loop
; END OF FUNCTION CHUNK FOR Check_TESTSW

; =============== S U B R O U T I N E =======================================


PROGRAMSTATUSCHECK:                     ; CODE XREF: MAIN+3A↓P
                ldaa    <RAM_RAM_Status ; RAM test location
                cmpa    #$AA            ; is this a cold boot (RAM_restart0&1 do not contain 55AA)?
                bne     NMI_BADCHECK    ; the cold boot
                ldaa    <RAM_RAM_Status+1 ; check RAM_restart1 for AA
                cmpa    #$55 ; 'U'      ; check if RAM_restart1 contains 55 (NO cold boot)?
                bne     NMI_BADCHECK    ; if not then cold boot
                tsx                     ; move stackpointer to X and increment
                ldaa    0,x
                cmpa    #$6F ; 'o'      ; PC in range?
                bls     NMI_BADCHECK    ; NO
                cmpa    #$7F
                bhi     NMI_BADCHECK    ;  BOOT up sequence
                stx     <RAM_TableOffset_MSB ; check stack pointer
                ldaa    <RAM_TableOffset_MSB
                bne     NMI_BADCHECK    ; invalid
                ldaa    <RAM_TableOffset_MSB+1
; End of function PROGRAMSTATUSCHECK


; =============== S U B R O U T I N E =======================================

; NMI entry point

NMI_REGULAR:                            ; CODE XREF: ROM:7069↓p

; FUNCTION CHUNK AT 7001 SIZE 00000022 BYTES
; FUNCTION CHUNK AT 7BF2 SIZE 0000029E BYTES

                cmpa    #$D1
                bls     NMI_BADCHECK    ; Invalid
                rts
; ---------------------------------------------------------------------------

NMI_BADCHECK:                           ; CODE XREF: PROGRAMSTATUSCHECK+4↑j
                                        ; PROGRAMSTATUSCHECK+A↑j ...
                jmp     POWERON         ;  BOOT up sequence
; End of function NMI_REGULAR

; ---------------------------------------------------------------------------

NMI_VECTORSTART:                        ; DATA XREF: ROM:NMI_VEC↓o
                ldaa    <RAM_RAM_Status ; fetch RAM_restart0 value
                cmpa    #$AA            ; already initialized (=$AA)?
                bne     NMI_BADCHECK    ; NO, FAIL
                ldaa    <RAM_RAM_Status+1 ; fetch RAM_restar1 value
                cmpa    #$55 ; 'U'      ; already initialized (=$55)?
                bne     NMI_BADCHECK    ; NO, FAIL
                tsx
                ldaa    5,x
                cmpa    #$6F ; 'o'      ; PC IN RANGE?
                bls     NMI_BADCHECK    ; NO, FAIL
                cmpa    #$7F
                bhi     NMI_BADCHECK    ; FAIL
                stx     <NMITMP         ; check stack pointer
                ldaa    <NMITMP         ; INT. TEMP
                bne     NMI_BADCHECK    ; FAIL
                ldaa    <MSTMP          ; MATCH TEMP
                bsr     NMI_REGULAR     ; NMI entry point
                rti

; =============== S U B R O U T I N E =======================================

; routine to scan the rotary switch

Replay_Rotary_SW_scan:                  ; CODE XREF: Check_TESTSW-670↑p
                                        ; NMI_REGULAR+C4A↓P
                clra                    ; clear A
                ldx     #HEXCODED_SW8   ; set index to highest switch location

Replay_Rotary_SW_scan1:                 ; CODE XREF: Replay_Rotary_SW_scan+C↓j
                ldab    0,x             ; get current switch value
                rolb                    ; adjust B
                rola                    ; adjust A
                dex                     ; next switch (decrement address)
                cpx     #YLANETARGET_SW ; all 8 switches done?
                bne     Replay_Rotary_SW_scan1 ; No? Go back for rest
                asla                    ; adjust left
                ldx     #Replay_Level_Table ; point to start data table
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    0,x
                staa    <RAM_First_Replay_Level ; hold the first replay level
                ldaa    SW1_toggle3     ; second replay level needed?
                bmi     Replay_Rotary_SW_scan1a ; yes, jump and fetch second replay level
                clra                    ; second level not needed so set it to 0
                bra     Replay_Rotary_SW_scan1b ; jump and fill second level with 0
; ---------------------------------------------------------------------------

Replay_Rotary_SW_scan1a:                ; CODE XREF: Replay_Rotary_SW_scan+1C↑j
                ldaa    1,x             ; get second replay level

Replay_Rotary_SW_scan1b:                ; CODE XREF: Replay_Rotary_SW_scan+1F↑j
                staa    <RAM_Second_Replay_Level ; store in second replay level
                beq     Get_MaxCredits_Per_Game ; if second replay level = 0 no need to check Add-A-Ball feature so jump
                ldab    SW1_toggle8     ; fetch Replay/Add-a-Ball switch
                bmi     Get_MaxCredits_Per_Game ; jump if Replay mode (SW1-8  ON) is set
                adda    #3              ; add 3 (=30.000 points) to second level if Add-A-Ball mode set
                daa                     ; convert to BCD value
                staa    <RAM_Second_Replay_Level ; and store in Second Replay Level

Get_MaxCredits_Per_Game:                ; CODE XREF: Replay_Rotary_SW_scan+25↑j
                                        ; Replay_Rotary_SW_scan+2A↑j
                ldx     #SW1_toggle6    ; point to SW1_6
                jsr     GETOPTIONSWITCHMODE ; check dipswitch settings
                                        ;
                                        ; INPUT=ADDR  ;OUTPUT 0-1-2-3  SW. STATE ADDR+1, ADDR
                                        ;
                ldx     #Max_Credits_Per_Game_Tbl ; point to creditstable
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    0,x
                staa    <RAM_Max_Credits ; holds the maximum number of credits possible
                ldaa    #3              ; set to 3 balls per game
                ldab    SW2_toggle1     ; 5 ball per game switch selected?
                bpl     HEXSWSC005      ; no the jump
                adda    #2              ; else adjust balls to 5 balls per game

HEXSWSC005:                             ; CODE XREF: Replay_Rotary_SW_scan+46↑j
                staa    <RAM_BALL_Per_Game ; hold the number of balls per game
                rts
; End of function Replay_Rotary_SW_scan


; =============== S U B R O U T I N E =======================================

; check dipswitch settings
;
; INPUT=ADDR  ;OUTPUT 0-1-2-3  SW. STATE ADDR+1, ADDR
;

GETOPTIONSWITCHMODE:                    ; CODE XREF: Replay_Rotary_SW_scan+34↑P
                                        ; SW2_6SUB+3↓P ...
                clra                    ; clear flags
                ldab    0,x             ; load first switchvalue
                rolb                    ; rotate B left to check if empty
                rola                    ; rotate A left to check if empty
                ldab    1,x             ; load second switchvalue
                rolb                    ; rotate B left to check if empty
                rola                    ; rotate A tot check if empty
                rts                     ; return sub
; End of function GETOPTIONSWITCHMODE


; =============== S U B R O U T I N E =======================================

; routine to adjust player so in attract mode the player lights  blinks sequentialy (interval timed)
;

ADJUSTPLAYER_ATTRACTMODE:               ; CODE XREF: Check_TESTSW-668↑P
                dec     RAM_PLAYERINTERVALCNTR ; hold the interval timer used in attract mode  when the player indication 'scans' all player lights
                bpl     ADJUSTPLAYER_ATTRACTMODE_END
                ldaa    #$32 ; '2'
                staa    <RAM_PLAYERINTERVALCNTR ; hold the interval timer used in attract mode  when the player indication 'scans' all player lights
                jsr     CURRENTPLAYERINDICATION_OFF ; set current player indication to OFF
                                        ;
                ldaa    <RAM_CURRENTPLAYER ; holds the current player #
                cmpa    #4
                bne     ADJUSTPLAYER_ATTRACTMODE_1 ; increment  current player (next player)
                clra

ADJUSTPLAYER_ATTRACTMODE_1:             ; CODE XREF: ADJUSTPLAYER_ATTRACTMODE+10↑j
                inca                    ; increment  current player (next player)
                staa    <RAM_CURRENTPLAYER ; holds the current player #
                jsr     CURRENTPLAYERINDICATION_ON ; set current player indication to ON
                                        ;

ADJUSTPLAYER_ATTRACTMODE_END:           ; CODE XREF: ADJUSTPLAYER_ATTRACTMODE+3↑j
                rts
; End of function ADJUSTPLAYER_ATTRACTMODE


; =============== S U B R O U T I N E =======================================


INIT_ATTRACTMODE:                       ; CODE XREF: Check_TESTSW:Entry_mainloop↑P
                                        ; ATTRACTMODE+F↓P
                ldx     #ATTRACTMODETABLE
                stx     <RAM_ATTRACTMODETABLEINDEX
                ldx     #BACKGROUNDMODE
                stx     <RAM_BACKGROUNDINDEX
                clra
                staa    <RAM_ATTRACTTIMER
                staa    <RAM_BACKGROUNDTIMER
                rts
; End of function INIT_ATTRACTMODE


; =============== S U B R O U T I N E =======================================

; ATTRACT MODE routine

ATTRACTMODE:                            ; CODE XREF: Check_TESTSW-66E↑P
                ldaa    <RAM_ATTRACTTIMER ; is frame over?
                beq     ATTRACTMODE1    ; YES, then jump
                dec     RAM_ATTRACTTIMER ; otherwise decrement
                rts
; ---------------------------------------------------------------------------

ATTRACTMODE1:                           ; CODE XREF: ATTRACTMODE+2↑j
                                        ; ATTRACTMODE+12↓j ...
                ldx     <RAM_ATTRACTMODETABLEINDEX
                ldaa    0,x             ; start over
                inca
                bne     ATTRACTMODE2    ; YES
                jsr     INIT_ATTRACTMODE ; restart
                bra     ATTRACTMODE1
; ---------------------------------------------------------------------------

ATTRACTMODE2:                           ; CODE XREF: ATTRACTMODE+D↑j
                inca
                bne     ATTRACTMODE3
                inx
                ldaa    0,x
                staa    <RAM_LOOPINDEX
                bra     ATTRACTMODE10
; ---------------------------------------------------------------------------

ATTRACTMODE3:                           ; CODE XREF: ATTRACTMODE+15↑j
                inca
                bne     ATTRACTMODE5
                dec     RAM_LOOPINDEX
                beq     ATTRACTMODE10

ATTRACTMODE4:                           ; CODE XREF: ATTRACTMODE+2B↓j
                dex
                ldaa    0,x
                cmpa    #$FE
                bne     ATTRACTMODE4
                inx
                bra     ATTRACTMODE10
; ---------------------------------------------------------------------------

ATTRACTMODE5:                           ; CODE XREF: ATTRACTMODE+1F↑j
                inca
                bne     ATTRACTMODE6
                inx
                ldaa    0,x
                staa    <RAM_FRAMETIME
                bra     ATTRACTMODE10
; ---------------------------------------------------------------------------

ATTRACTMODE6:                           ; CODE XREF: ATTRACTMODE+31↑j
                inca
                bne     ATTRACTMODE9
                ldx     <RAM_BACKGROUNDINDEX

ATTRACTMODE7:                           ; CODE XREF: ATTRACTMODE+44↓j
                ldaa    0,x
                beq     ATTRACTMODE8
                inx
                bra     ATTRACTMODE7
; ---------------------------------------------------------------------------

ATTRACTMODE8:                           ; CODE XREF: ATTRACTMODE+41↑j
                inx
                stx     <RAM_BACKGROUNDINDEX
                ldx     <RAM_ATTRACTMODETABLEINDEX
                bra     ATTRACTMODE10
; ---------------------------------------------------------------------------

ATTRACTMODE9:                           ; CODE XREF: ATTRACTMODE+3B↑j
                ldaa    0,x
                jsr     LAMP_TABLE_INDEXER
                tsta
                bmi     ATTRACTMODE11

ATTRACTMODE10:                          ; CODE XREF: ATTRACTMODE+1C↑j
                                        ; ATTRACTMODE+24↑j ...
                inx
                stx     <RAM_ATTRACTMODETABLEINDEX
                bra     ATTRACTMODE1
; ---------------------------------------------------------------------------

ATTRACTMODE11:                          ; CODE XREF: ATTRACTMODE+53↑j
                ldaa    <RAM_FRAMETIME
                staa    <RAM_ATTRACTTIMER
                inx
                stx     <RAM_ATTRACTMODETABLEINDEX
                rts
; End of function ATTRACTMODE

; BACKGROUND PROCESS CALLED EVERY & MSEC

; =============== S U B R O U T I N E =======================================


BACKGROUNDPROCES:                       ; CODE XREF: Check_TESTSW-66B↑P
                ldaa    <RAM_BACKGROUNDTIMER ; frame over?
                beq     BACKGROUNDPROCES1 ; YES
                dec     RAM_BACKGROUNDTIMER ; NO, decrement and exit
                rts
; ---------------------------------------------------------------------------

BACKGROUNDPROCES1:                      ; CODE XREF: BACKGROUNDPROCES+2↑j
                                        ; BACKGROUNDPROCES+2C↓j
                ldx     <RAM_BACKGROUNDINDEX
                ldaa    0,x
                cmpa    #$FF
                bne     BACKGROUNDPROCES3

BACKGROUNDPROCES2:                      ; CODE XREF: BACKGROUNDPROCES+14↓j
                dex
                ldaa    0,x
                inca
                bne     BACKGROUNDPROCES2
                bra     BACKGROUNDPROCES5
; ---------------------------------------------------------------------------

BACKGROUNDPROCES3:                      ; CODE XREF: BACKGROUNDPROCES+E↑j
                cmpa    #$FC            ; new frame value
                bne     BACKGROUNDPROCES4
                inx
                ldaa    0,x
                staa    <RAM_BACKGROUNDFRAME
                bra     BACKGROUNDPROCES5
; ---------------------------------------------------------------------------

BACKGROUNDPROCES4:                      ; CODE XREF: BACKGROUNDPROCES+1A↑j
                jsr     LAMP_TABLE_INDEXER
                tsta
                bmi     BACKGROUNDPROCES6

BACKGROUNDPROCES5:                      ; CODE XREF: BACKGROUNDPROCES+16↑j
                                        ; BACKGROUNDPROCES+21↑j
                inx
                stx     <RAM_BACKGROUNDINDEX
                bra     BACKGROUNDPROCES1
; ---------------------------------------------------------------------------

BACKGROUNDPROCES6:                      ; CODE XREF: BACKGROUNDPROCES+27↑j
                ldaa    <RAM_BACKGROUNDFRAME ; reset timer
                staa    <RAM_BACKGROUNDTIMER
                inx                     ; increment index
                stx     <RAM_BACKGROUNDINDEX
                rts
; End of function BACKGROUNDPROCES

; ---------------------------------------------------------------------------
; PLAYFIELD SWITCH & GAME PROCESSING

; START OF FUNCTION CHUNK FOR Check_TESTSW
;   ADDITIONAL PARENT FUNCTION sub_7752

INIT_CURRENTGAME:                       ; CODE XREF: Check_TESTSW-27A↓J
                                        ; sub_7752+5C↓J
                jsr     ALLLamps_Off    ; initialise current game
                clra                    ; A=0, reset counters
                staa    <RAM_SCOREFLAG  ;  0 = no score, 1 = scored
                staa    <RAM_BONUSMULTIPLIER ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus
                staa    <RAM_BONUSADVANCESTATE
                staa    <RAM_LEFTDROPTARGETSTATE
                staa    <RAM_CENTERDROPTARGETSTATE
                staa    <RAM_RIGHTDROPTARGETSTATE
                staa    <RAM_CAPTIVETARGETFLAG
                staa    <RAM_DROPTARGETSTATUS
                staa    <RAM_COINCOUNT+1
                staa    <RAM_ALTERNATIONFLAG
                coma                    ; set flippers on
                staa    <RAM_FLIPPERSENABLE
                ldaa    <RAM_CURRENTBALL ; get current ball in play
                ora     #$F0            ; adjust for display
                staa    <RAM_DISP_CurrentBallDisplay ; set BALL in PLAY display
                ldx     #$12            ; set number of places to init to $12

RESET_RAMSWVALUES:                      ; CODE XREF: Check_TESTSW-4CB↓j
                clr     $46,x           ; reset the RAMSWVALUES table from 58 to 46
                dex
                bne     RESET_RAMSWVALUES ; if not all cleared back till x=0
                jsr     PMGETMEMORY     ;  get memory
                jsr     LIGHTDROPLIGHTS ; lite droplights
                jsr     LIGHTTARGETLIGHTS ; lite targetlights
                jsr     LIGHTBIKECITYLIGHTS ; lite BIKECITY lights
                ldaa    #RAM_LAMP00     ; LIGHT STAR ROLLOVERS

loc_71BC:                               ; CODE XREF: Check_TESTSW-4B5↓j
                jsr     LAMP_TABLE_INDEXER
                inca
                cmpa    #RAM_LAMP07     ; bit 0   D   J1-2    TRIPLE BONUS
                                        ; bit 1   D   J1-11   BONUS 4K
                                        ; bit 2   D   J1-20   BONUS 8K
                                        ; bit 3   D   J2-8    BONUS 30K
                                        ;         D   J13-4   STROBE D
                                        ;         D   J2-A    ILLUMINATION
                bne     loc_71BC
                ldaa    #RAM_LAMP0C     ; bit 0   A   J1-7    RIGHT EXTRA BALL
                                        ; bit 1   A   J1-T    PI P E
                                        ; bit 2   A   J2-D    RIGHT UPPER CENTER ROLLOVER
                staa    <RAM_DROPCOUNTER

loc_71C8:                               ; CODE XREF: HOLEKICKERCHECK-50A↓J
                ldaa    #$F
                staa    <RAM_OUTHOLEKICKER_SW

PSWITCH:                                ; CODE XREF: Check_TESTSW-478↓j
                jsr     SWITCHSCANNER   ; scan all switches and save result in RAM
                ldx     #RAM_SW_LATCH   ; ""
                ldab    #$FF

loc_71D4:                               ; CODE XREF: Check_TESTSW-49A↓j
                ldaa    0,x
                bne     loc_71E1        ; find switch
                inx
                addb    #8
                cmpb    #$2F ; '/'      ;  done all switches?
                bne     loc_71D4
                bra     loc_71FC        ; finish
; ---------------------------------------------------------------------------

loc_71E1:                               ; CODE XREF: Check_TESTSW-4A1↑j
                                        ; Check_TESTSW-494↓j
                incb                    ; find switch
                lsra
                bcc     loc_71E1        ; find switch
                pshb                    ; save B
                andb    #7

loc_71E8:                               ; CODE XREF: Check_TESTSW-48D↓j
                asla                    ; reset bit
                decb
                bpl     loc_71E8        ; reset bit
                staa    0,x             ; store reset mask
                pula                    ; find vector
                ldx     #SwithMatrix_VectorTbl ; point to begin switch vector jump data table
                asla
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldx     0,x
                beq     loc_71FC        ; invalid vector
                jsr     0,x             ; handle switch

loc_71FC:                               ; CODE XREF: Check_TESTSW-498↑j
                                        ; Check_TESTSW-47F↑j
                jsr     MAIN
                bra     PSWITCH
; END OF FUNCTION CHUNK FOR Check_TESTSW

; =============== S U B R O U T I N E =======================================


topleftrollover_sw:                     ; DATA XREF: NMI_REGULAR+DE4↓o
                ldaa    <RAM_LAMP00     ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL
                anda    #1
                beq     ADD_50_TSCORE   ; top left rollover LAMP
                ldaa    #$70 ; 'p'
                bra     loc_721D
; ---------------------------------------------------------------------------

toprightrollover_sw:                    ; DATA XREF: NMI_REGULAR+DE6↓o
                ldaa    <RAM_LAMP00     ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL
                anda    #2
                beq     ADD_50_TSCORE
                ldaa    #$71 ; 'q'
                bra     loc_721D
; ---------------------------------------------------------------------------

upperrightrollover_sw:                  ; DATA XREF: NMI_REGULAR+DEA↓o
                ldaa    <RAM_LAMP08     ; bit 0   A   J1-3    RIGHT SPECIAL
                                        ; bit 1   A   J1-12   P I PE
                                        ; bit 2   A   J1-21   UPPER CENTER ROLLOVER
                anda    #4
                beq     ADD_50_TSCORE
                ldaa    #$73 ; 's'

loc_721D:                               ; CODE XREF: topleftrollover_sw+8↑j
                                        ; topleftrollover_sw+12↑j
                inc     RAM_CENTERDROPTARGETSTATE
                bra     ADD_500_TSCORE
; ---------------------------------------------------------------------------

upperleftrollover_sw:                   ; DATA XREF: NMI_REGULAR+DE8↓o
                ldaa    <RAM_LAMP04     ; bit 0   A   J1-F    RIGHT SPINNER
                                        ; bit 1   A   J1-S    P IPE
                                        ; bit 2   A   J1-17   LEFT UPPER CENTER ROLLOVER
                                        ; bit 3   A   J2-5    LEFT EXTRA BALL
                                        ;         A    J13-1   STROBE A
                                        ;         A    J1-1    ILLUMINATION
                anda    #4
                beq     ADD_50_TSCORE
                ldaa    #$72 ; 'r'
                bra     loc_7234
; ---------------------------------------------------------------------------

lowerleftrollover_sw:                   ; DATA XREF: NMI_REGULAR+E02↓o
                ldaa    <RAM_LAMP0D     ; bit 0   B   J1-8    RIGHT THUMPER BUMPER
                                        ; bit 1   B   J1-U    LEFT LOWER CENTER ROLLOVER
                                        ; bit 2   B   J2-E    LEFT DROP TARGET 5K
                anda    #2
                beq     ADD_50_TSCORE
                ldaa    #$75 ; 'u'

loc_7234:                               ; CODE XREF: topleftrollover_sw+29↑j
                inc     RAM_LEFTDROPTARGETSTATE
                bra     ADD_500_TSCORE
; ---------------------------------------------------------------------------

uppercenterrollover_sw:                 ; DATA XREF: NMI_REGULAR+E00↓o
                ldaa    <RAM_LAMP0C     ; bit 0   A   J1-7    RIGHT EXTRA BALL
                                        ; bit 1   A   J1-T    PI P E
                                        ; bit 2   A   J2-D    RIGHT UPPER CENTER ROLLOVER
                anda    #4
                beq     ADD_50_TSCORE   ; upper right rollover LAMP
                ldaa    #$74 ; 't'
                bra     loc_724B
; ---------------------------------------------------------------------------

lowerrightrollover_sw:                  ; DATA XREF: NMI_REGULAR+E04↓o
                ldaa    <RAM_LAMP01     ; bit 0   B   J1-C    RIGHT CAPTIVE BALL TARGET
                                        ; bit 1   B   J1-N    LEFT CAPTIVE BALL TARGET
                                        ; bit 2   B   J1-Y    RIGHT LOWER CENTER ROLLOVER
                                        ; bit 3   B   J2-2    CENTER DROP TARGET 3K
                anda    #4
                beq     ADD_50_TSCORE   ; lower right roll over LAMP
                ldaa    #$76 ; 'v'

loc_724B:                               ; CODE XREF: topleftrollover_sw+40↑j
                inc     RAM_RIGHTDROPTARGETSTATE

ADD_500_TSCORE:                         ; CODE XREF: topleftrollover_sw+1F↑j
                                        ; topleftrollover_sw+36↑j
                jsr     LAMP_TABLE_INDEXER
                jsr     LIGHTDROPLIGHTS
                ldaa    <RAM_TSCORE100  ; temporary score #100ths
                adda    #5
                staa    <RAM_TSCORE100  ; temporary score #100ths
                rts
; ---------------------------------------------------------------------------

ADD_50_TSCORE:                          ; CODE XREF: topleftrollover_sw+4↑j
                                        ; topleftrollover_sw+E↑j ...
                ldaa    <RAM_TSCORE10   ; temporary score #10
                adda    #5              ; add 50?  point to temp. score
                staa    <RAM_TSCORE10   ; temporary score #10
                rts
; End of function topleftrollover_sw


; =============== S U B R O U T I N E =======================================


B_ike_targetsw:                         ; DATA XREF: NMI_REGULAR+E08↓o

; FUNCTION CHUNK AT 750B SIZE 0000000F BYTES

                ldaa    #$80
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

b_I_ke_targetsw:                        ; DATA XREF: NMI_REGULAR+E0A↓o
                ldaa    #$40 ; '@'
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

bi_K_e_targetsw:                        ; DATA XREF: NMI_REGULAR+E0C↓o
                ldaa    #$20 ; ' '
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

bik_E_targetsw:                         ; DATA XREF: NMI_REGULAR+E0E↓o
                ldaa    #$10
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

C_ity_targetsw:                         ; DATA XREF: NMI_REGULAR+E30↓o
                ldaa    #8
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

c_I_ty_targetsw:                        ; DATA XREF: NMI_REGULAR+E32↓o
                ldaa    #4
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

ci_T_y_targetsw:                        ; DATA XREF: NMI_REGULAR+E34↓o
                ldaa    #2
                bra     bikecitybonus   ; combine with stored (already played letters)
; ---------------------------------------------------------------------------

cit_Y_targetsw:                         ; DATA XREF: NMI_REGULAR+E36↓o
                ldaa    #1

bikecitybonus:                          ; CODE XREF: B_ike_targetsw+2↑j
                                        ; B_ike_targetsw+6↑j ...
                ora     <RAM_BIKECITY   ; combine with stored (already played letters)
                cmpa    <RAM_BIKECITY   ; any new letter added?
                beq     drainandspinnerlanes_sw ; no, then just add 1000 points
                staa    <RAM_BIKECITY   ; else store new played letters
                coma                    ;  all 8 letters done?
                bne     bikecitybonus1  ; no, then jump
                ldaa    #$4C ; 'L'      ;  triple bonus from here
                jsr     LAMP_TABLE_INDEXER
                ldaa    #$D
                bra     loc_72A2
; ---------------------------------------------------------------------------

bikecitybonus1:                         ; CODE XREF: B_ike_targetsw+27↑j
                ldab    <RAM_BONUSMULTIPLIER ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus
                bne     loc_72AC
                bita    #$F             ; CITY complete?
                beq     BIKEorCITYcomplete
                bita    #$F0            ; BIKE complete?
                bne     loc_72AC

BIKEorCITYcomplete:                     ; CODE XREF: B_ike_targetsw+38↑j
                ldaa    #$C

loc_72A2:                               ; CODE XREF: B_ike_targetsw+30↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    #$A
                staa    <byte_9C
                inc     RAM_BONUSMULTIPLIER ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus

loc_72AC:                               ; CODE XREF: B_ike_targetsw+34↑j
                                        ; B_ike_targetsw+3C↑j
                jsr     LIGHTBIKECITYLIGHTS

drainandspinnerlanes_sw:                ; CODE XREF: B_ike_targetsw+22↑j
                                        ; DATA XREF: NMI_REGULAR+E06↓o
                inc     RAM_TSCORE1000
                jmp     BONUSADVANCE
; End of function B_ike_targetsw


; =============== S U B R O U T I N E =======================================


leftthumperbumper_sw:                   ; DATA XREF: NMI_REGULAR+DEC↓o
                ldaa    #3
                staa    <RAMLEFTTHUMPERBUMPER_SW ; SOLENOID COINTERS
                ldaa    <RAM_LAMP09     ; bit 0   B   J1-4    LEFT THUMPER BUMPER
                                        ; bit 1   B   J1-13   CENTER DROP TARGET 10K
                                        ; bit 2   B   J1-22   LEFT DROP TARGET 3K
                anda    #1
                beq     ADD_100_TSCORE
                bra     INC_1000_TSCORE
; ---------------------------------------------------------------------------

rightthumperbumper_sw:                  ; DATA XREF: NMI_REGULAR+DEE↓o
                ldaa    #3
                staa    <RAMRIGHTTHUMBERBUMPER_SW
                ldaa    <RAM_LAMP0D     ; bit 0   B   J1-8    RIGHT THUMPER BUMPER
                                        ; bit 1   B   J1-U    LEFT LOWER CENTER ROLLOVER
                                        ; bit 2   B   J2-E    LEFT DROP TARGET 5K
                anda    #1
                beq     ADD_100_TSCORE

INC_1000_TSCORE:                        ; CODE XREF: leftthumperbumper_sw+A↑j
                inc     RAM_TSCORE1000
                rts
; ---------------------------------------------------------------------------

ADD_100_TSCORE:                         ; CODE XREF: leftthumperbumper_sw+8↑j
                                        ; leftthumperbumper_sw+14↑j
                inc     RAM_TSCORE100   ; temporary score #100ths
                rts
; End of function leftthumperbumper_sw


; =============== S U B R O U T I N E =======================================

;
;

rightslingshot_sw:                      ; DATA XREF: NMI_REGULAR+E12↓o
                ldaa    <RAM_RIGHTSLINGSHOTDELAY ; initial value of counter is set to $1E00
                bne     slingshots_end
                ldaa    #$1E            ; set initial value to $1E so counter starts at $1E00
                staa    <RAM_RIGHTSLINGSHOTDELAY ; initial value of counter is set to $1E00
                ldaa    #7
                staa    <RAM_RIGHTSLINGSHOT_SW
                bra     slingshots
; ---------------------------------------------------------------------------

leftslingshot_sw:                       ; DATA XREF: NMI_REGULAR+E14↓o
                ldaa    <RAM_LEFTSLINGSHOTDELAY
                bne     slingshots_end
                ldaa    #$1E
                staa    <RAM_LEFTSLINGSHOTDELAY
                ldaa    #7
                staa    <RAMLEFTSLINGSHOT_SW

slingshots:                             ; CODE XREF: rightslingshot_sw+C↑j
                jsr     sub_7590
                inc     RAM_TSCORE10    ; temporary score #10
                inc     RAM_TSCORE10    ; temporary score #10

slingshots_end:                         ; CODE XREF: rightslingshot_sw+2↑j
                                        ; rightslingshot_sw+10↑j
                rts
; End of function rightslingshot_sw


; =============== S U B R O U T I N E =======================================


tenpoint_sw:                            ; DATA XREF: NMI_REGULAR+E1A↓o
                inc     RAM_TSCORE10    ; temporary score #10
                rts
; End of function tenpoint_sw


; =============== S U B R O U T I N E =======================================


fiftypoint_sw:                          ; DATA XREF: NMI_REGULAR+E1C↓o
                ldaa    #5
                adda    <RAM_TSCORE10   ; temporary score #10
                staa    <RAM_TSCORE10   ; temporary score #10
                rts
; End of function fiftypoint_sw


; =============== S U B R O U T I N E =======================================


leftcaptiveballtarget_sw:               ; DATA XREF: NMI_REGULAR+E20↓o

; FUNCTION CHUNK AT 750B SIZE 0000000F BYTES

                ldaa    #1
                bra     captivetargets
; ---------------------------------------------------------------------------

centercaptivetarget_sw:                 ; DATA XREF: NMI_REGULAR+E22↓o
                ldaa    #2
                bra     captivetargets
; ---------------------------------------------------------------------------

rightcaptivetarget_sw:                  ; DATA XREF: NMI_REGULAR+E26↓o
                ldaa    #4
; ---------------------------------------------------------------------------
                db $20
                db   0
; ---------------------------------------------------------------------------

captivetargets:                         ; CODE XREF: leftcaptiveballtarget_sw+2↑j
                                        ; leftcaptiveballtarget_sw+6↑j
                ora     <RAM_CAPTIVETARGETFLAG
                cmpa    <RAM_CAPTIVETARGETFLAG
                beq     ADD_3000_TSCORE
                staa    <RAM_CAPTIVETARGETFLAG
                cmpa    #7
                bne     loc_732A
                ldaa    SW1_toggle4
                bmi     loc_7325
                ldaa    <RAM_DROPTARGETSTATUS
                cmpa    #7
                bne     loc_732A

loc_7325:                               ; CODE XREF: leftcaptiveballtarget_sw+1B↑j
                ldaa    #4
                jsr     sub_758A

loc_732A:                               ; CODE XREF: leftcaptiveballtarget_sw+16↑j
                                        ; leftcaptiveballtarget_sw+21↑j
                jsr     LIGHTTARGETLIGHTS

ADD_3000_TSCORE:                        ; CODE XREF: leftcaptiveballtarget_sw+10↑j
                ldaa    #3
                adda    <RAM_TSCORE1000
                staa    <RAM_TSCORE1000
                jmp     BONUSADVANCE
; End of function leftcaptiveballtarget_sw


; =============== S U B R O U T I N E =======================================


leftdroptarget_sw:                      ; DATA XREF: NMI_REGULAR+E28↓o
                ldab    <RAM_DROPCOUNTER
                bne     droptargets4
                ldaa    #$1E
                jsr     LAMP_TABLE_INDEXER
                ldaa    <RAM_LEFTDROPTARGETSTATE
                ldab    #1
                bra     droptargets
; ---------------------------------------------------------------------------

centerdroptarget_sw:                    ; DATA XREF: NMI_REGULAR+E2A↓o
                ldab    <RAM_DROPCOUNTER
                bne     droptargets4
                ldaa    #1
                jsr     sub_758A
                ldaa    <RAM_CENTERDROPTARGETSTATE
                ldab    #2
                bra     droptargets
; ---------------------------------------------------------------------------

rightdroptarget_sw:                     ; DATA XREF: NMI_REGULAR+E2E↓o
                ldab    <RAM_DROPCOUNTER
                bne     droptargets4
                ldaa    #$1F
                jsr     LAMP_TABLE_INDEXER
                ldaa    <RAM_RIGHTDROPTARGETSTATE
                ldab    #4

droptargets:                            ; CODE XREF: leftdroptarget_sw+D↑j
                                        ; leftdroptarget_sw+1C↑j
                inc     RAM_TSCORE1000
                inc     RAM_TSCORE1000
                deca
                bmi     droptargets1
                inc     RAM_TSCORE1000
                deca
                bmi     droptargets1
                inc     RAM_TSCORE1000
                inc     RAM_TSCORE1000
                deca
                bmi     droptargets1
                ldaa    #5
                adda    <RAM_TSCORE1000
                staa    <RAM_TSCORE1000

droptargets1:                           ; CODE XREF: leftdroptarget_sw+32↑j
                                        ; leftdroptarget_sw+38↑j ...
                orb     <RAM_DROPTARGETSTATUS
                stab    <RAM_DROPTARGETSTATUS
                cmpb    #7
                bne     droptargets4
                ldaa    <RAM_CAPTIVETARGETFLAG
                cmpa    #7
                bne     droptargets2
                ldaa    #4
                bra     droptargets3
; ---------------------------------------------------------------------------

droptargets2:                           ; CODE XREF: leftdroptarget_sw+55↑j
                ldaa    <RAM_EXTRABALLFLAG
                bne     droptargets4
                ldaa    #2

droptargets3:                           ; CODE XREF: leftdroptarget_sw+59↑j
                jsr     sub_758A

droptargets4:                           ; CODE XREF: leftdroptarget_sw+2↑j
                                        ; leftdroptarget_sw+11↑j ...
                jmp     LIGHTDROPLIGHTS
; End of function leftdroptarget_sw

; ---------------------------------------------------------------------------

rightspinner_sw:                        ; DATA XREF: NMI_REGULAR+E24↓o
                ldaa    <RAM_LAMP04     ; bit 0   A   J1-F    RIGHT SPINNER
                                        ; bit 1   A   J1-S    P IPE
                                        ; bit 2   A   J1-17   LEFT UPPER CENTER ROLLOVER
                                        ; bit 3   A   J2-5    LEFT EXTRA BALL
                                        ;         A    J13-1   STROBE A
                                        ;         A    J1-1    ILLUMINATION
                anda    #1
                bne     loc_73B2
                bra     spinners
; ---------------------------------------------------------------------------

leftspinner_sw:                         ; DATA XREF: NMI_REGULAR+E2C↓o
                ldaa    <RAM_LAMP05     ; bit 0   B   J1-H    RIGHT DROP TARGET 3K
                                        ; bit 1   B   J1-9    CENTER CAPTIVE BALL TARGET
                                        ; bit 2   B   J1-18   LEFT SPINNER
                                        ; bit 3   B   J2-6    CENTER DROP TARGET 5K
                                        ;         B   J13-2   STROBE B
                                        ;         B   J1-A    ILLUMINATION
                anda    #4
                bne     loc_73B2

spinners:                               ; CODE XREF: ROM:73A3↑j
                clr     RAM_TELLER002
                inc     RAM_TSCORE100   ; temporary score #100ths
                rts
; ---------------------------------------------------------------------------

loc_73B2:                               ; CODE XREF: ROM:73A1↑j
                                        ; ROM:73A9↑j
                clr     RAM_TELLER000
                inc     RAM_TSCORE1000
                rts

; =============== S U B R O U T I N E =======================================


allkickerhole_sw:                       ; DATA XREF: NMI_REGULAR+E10↓o
                                        ; NMI_REGULAR+E16↓o ...
                ldaa    #$28 ; '('
                staa    <RAM_COINCOUNT+1
                rts
; End of function allkickerhole_sw

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR HOLEKICKERCHECK

loc_73BE:                               ; CODE XREF: HOLEKICKERCHECK-510↓j
                                        ; HOLEKICKERCHECK+E↓J
                lds     #$FF
                jsr     MAIN
                ldx     #$8D
                clra

loc_73C8:                               ; CODE XREF: HOLEKICKERCHECK-513↓j
                ora     0,x
                inx
                cpx     #$A7
                bne     loc_73C8
                tsta
                bne     loc_73BE
                ldaa    <RAM_SCOREFLAG  ;  0 = no score, 1 = scored
                bne     loc_73DA
                jmp     loc_71C8
; ---------------------------------------------------------------------------

loc_73DA:                               ; CODE XREF: HOLEKICKERCHECK-50C↑j
                jsr     COLLECTBONUS
; END OF FUNCTION CHUNK FOR HOLEKICKERCHECK
; START OF FUNCTION CHUNK FOR Check_TESTSW

loc_73DD:                               ; CODE XREF: Check_TESTSW+AE↓J
                jsr     SAVE_MEMORY
                jsr     CURRENTPLAYERINDICATION_OFF ; set current player indication to OFF
                                        ;
                ldaa    <RAM_EXTRABALLFLAG ;  extra ball?
                beq     loc_73EA        ;  NO
                dec     RAM_CURRENTPLAYER ; holds the current player #

loc_73EA:                               ; CODE XREF: Check_TESTSW-292↑j
                ldaa    <RAM_CURRENTPLAYER ; holds the current player #
                cmpa    <RAM_NUMBEROFPLAYERS ; hold the number of players in the game
                bne     loc_73FA
                ldab    <RAM_CURRENTBALL ; hold the current ball number in play
                cmpb    <RAM_BALL_Per_Game ; hold the number of balls per game
                beq     loc_7400
                incb
                stab    <RAM_CURRENTBALL ; hold the current ball number in play
                clra

loc_73FA:                               ; CODE XREF: Check_TESTSW-289↑j
                inca
                staa    <RAM_CURRENTPLAYER ; holds the current player #
                jmp     INIT_CURRENTGAME ; initialise current game
; ---------------------------------------------------------------------------

loc_7400:                               ; CODE XREF: Check_TESTSW-283↑j
                ldaa    #RAM_LAMP07     ; bit 0   D   J1-2    TRIPLE BONUS
                                        ; bit 1   D   J1-11   BONUS 4K
                                        ; bit 2   D   J1-20   BONUS 8K
                                        ; bit 3   D   J2-8    BONUS 30K
                                        ;         D   J13-4   STROBE D
                                        ;         D   J2-A    ILLUMINATION
                jsr     LAMP_TABLE_INDEXER
                clra
                staa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                staa    <RAM_COIN1COUNTER ; holds the number of coins #1
                staa    <RAM_COIN2COUNTER ; holds the number of coins #2
                staa    <RAM_FLIPPERSENABLE
                ldaa    #$4F ; 'O'
                jsr     LAMP_TABLE_INDEXER
                ldaa    SW2_toggle2     ; match feature OFF=Match Off ON=Match On
                bpl     loc_745C
                ldaa    #$10
                jsr     LAMP_TABLE_INDEXER
                ldx     #$7EAC
                ldaa    <RAM_MATCHSEED
                staa    <RAM_DISP_CurrentBallDisplay ; hold the ball in play display
                clra
                staa    <byte_16

loc_7427:                               ; CODE XREF: Check_TESTSW-237↓j
                ldaa    0,x
                beq     loc_7442
                inx

loc_742C:                               ; CODE XREF: Check_TESTSW-243↓j
                ldab    <byte_16
                stab    <byte_A5
                jsr     MAIN
                deca
                bne     loc_742C
                inc     byte_16
                ldaa    #$30 ; '0'
                adda    <RAM_DISP_CurrentBallDisplay ; hold the ball in play display
                daa
                staa    <RAM_DISP_CurrentBallDisplay ; hold the ball in play display
                bra     loc_7427
; ---------------------------------------------------------------------------

loc_7442:                               ; CODE XREF: Check_TESTSW-24E↑j
                ldx     #RAM_DISP4_D2D1 ; layout  display  D6 d5 d4 d3 d2 d1 (BCD coded)
                                        ; the displays can display 0..E  F =blank

loc_7445:                               ; CODE XREF: Check_TESTSW-21D↓j
                ldaa    <RAM_DISP_CurrentBallDisplay ; hold the ball in play display
                cmpa    0,x
                bne     loc_7453
                jsr     sub_7BD6
                ldab    #$14
                jsr     WAITLOOP

loc_7453:                               ; CODE XREF: Check_TESTSW-22E↑j
                inx                     ; point to next player# display (in reality previous as the 4th display is first in memory)
                inx
                inx
                inx
                cpx     #$10            ; all display done?
                bne     loc_7445        ; no, stay here and do next display

loc_745C:                               ; CODE XREF: Check_TESTSW-261↑j
                jmp     Entry_mainloop
; END OF FUNCTION CHUNK FOR Check_TESTSW

; =============== S U B R O U T I N E =======================================


LIGHTTARGETLIGHTS:                      ; CODE XREF: Check_TESTSW-4C3↑P
                                        ; leftcaptiveballtarget_sw:loc_732A↑P ...
                ldab    <RAM_CAPTIVETARGETFLAG
                ldaa    #score4_D2D1

loc_7463:                               ; CODE XREF: LIGHTTARGETLIGHTS+16↓j
                lsrb
                bcc     loc_746F
                adda    #RAM_SW1_1_TEST_SW
                jsr     LAMP_TABLE_INDEXER
                suba    #RAM_SW1_1_TEST_SW
                bra     loc_7472
; ---------------------------------------------------------------------------

loc_746F:                               ; CODE XREF: LIGHTTARGETLIGHTS+5↑j
                jsr     LAMP_TABLE_INDEXER

loc_7472:                               ; CODE XREF: LIGHTTARGETLIGHTS+E↑j
                inca
                cmpa    #$23 ; '#'
                bne     loc_7463
                rts
; End of function LIGHTTARGETLIGHTS


; =============== S U B R O U T I N E =======================================


LIGHTDROPLIGHTS:                        ; CODE XREF: Check_TESTSW-4C6↑P
                                        ; topleftrollover_sw+50↑P ...
                ldaa    <RAM_DROPTARGETSTATUS
                clrb
                bita    #1
                bne     loc_7481
                ldab    <RAM_LEFTDROPTARGETSTATE

loc_7481:                               ; CODE XREF: LIGHTDROPLIGHTS+5↑j
                ldaa    #$23 ; '#'
                decb
                bpl     loc_7488
                adda    #$40 ; '@'

loc_7488:                               ; CODE XREF: LIGHTDROPLIGHTS+C↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    #score3_D2D1
                decb
                bpl     loc_7492
                adda    #$40 ; '@'

loc_7492:                               ; CODE XREF: LIGHTDROPLIGHTS+16↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    <RAM_DROPTARGETSTATUS
                clrb
                bita    #2
                bne     loc_749E
                ldab    <RAM_CENTERDROPTARGETSTATE

loc_749E:                               ; CODE XREF: LIGHTDROPLIGHTS+22↑j
                ldaa    #$25 ; '%'
                decb
                bpl     loc_74A5
                adda    #$40 ; '@'

loc_74A5:                               ; CODE XREF: LIGHTDROPLIGHTS+29↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    #score3_D6D5
                decb
                bpl     loc_74AF
                adda    #$40 ; '@'

loc_74AF:                               ; CODE XREF: LIGHTDROPLIGHTS+33↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    #$27 ; '''
                decb
                bpl     loc_74B9
                adda    #$40 ; '@'

loc_74B9:                               ; CODE XREF: LIGHTDROPLIGHTS+3D↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    <RAM_DROPTARGETSTATUS
                clrb
                bita    #4
                bne     loc_74C5
                ldab    <RAM_RIGHTDROPTARGETSTATE

loc_74C5:                               ; CODE XREF: LIGHTDROPLIGHTS+49↑j
                ldaa    #score2_D2D1
                decb
                bpl     loc_74CC
                adda    #$40 ; '@'

loc_74CC:                               ; CODE XREF: LIGHTDROPLIGHTS+50↑j
                jsr     LAMP_TABLE_INDEXER
                ldaa    #score2_D4D3
                decb
                bpl     loc_74D6
                adda    #$40 ; '@'

loc_74D6:                               ; CODE XREF: LIGHTDROPLIGHTS+5A↑j
                jmp     LAMP_TABLE_INDEXER
; End of function LIGHTDROPLIGHTS


; =============== S U B R O U T I N E =======================================

;
;

sub_74D9:                               ; CODE XREF: HOLEKICKERCHECK+26↓P
                                        ; HOLEKICKERCHECK+43↓P
                ldaa    #5
                adda    <RAM_TSCORE1000
                staa    <RAM_TSCORE1000 ;  add 5000 points (= add 5 to RAM_TSCORE1000)
                ldab    #$37 ; '7'
                jsr     WAITLOOP
                ldaa    #$3C ; '<'
                staa    <RAM_DROPCOUNTER
                ldaa    #$5E ; '^'
                jsr     LAMP_TABLE_INDEXER
                inca
                jsr     LAMP_TABLE_INDEXER
                clra
                staa    <RAM_DROPTARGETSTATUS
                ldab    SW1_toggle4
                bmi     loc_74FB
                staa    <RAM_ALTERNATIONFLAG

loc_74FB:                               ; CODE XREF: sub_74D9+1E↑j
                ldaa    <RAM_ALTERNATIONFLAG
                anda    #4
                staa    <RAM_ALTERNATIONFLAG
                jsr     sub_7597
                jsr     LIGHTDROPLIGHTS
                jsr     LIGHTTARGETLIGHTS

locret_750A:                            ; CODE XREF: B_ike_targetsw+2AD↓j
                rts
; End of function sub_74D9

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR B_ike_targetsw
;   ADDITIONAL PARENT FUNCTION leftcaptiveballtarget_sw

BONUSADVANCE:                           ; CODE XREF: B_ike_targetsw+50↑J
                                        ; leftcaptiveballtarget_sw+31↑J
                ldaa    <RAM_BONUSADVANCESTATE
                cmpa    #$1E
                beq     locret_750A
                inc     RAM_BONUSADVANCESTATE
                ldaa    #3
                adda    <byte_9E
                staa    <byte_9E
; END OF FUNCTION CHUNK FOR B_ike_targetsw

; =============== S U B R O U T I N E =======================================


sub_751A:                               ; CODE XREF: COLLECTBONUS:loc_7550↓p
                                        ; COLLECTBONUS+33↓p
                ldaa    #$40 ; '@'

loc_751C:                               ; CODE XREF: sub_751A+8↓j
                jsr     LAMP_TABLE_INDEXER
                inca
                cmpa    #$4C ; 'L'
                bne     loc_751C
                ldab    <RAM_BONUSADVANCESTATE
                cmpb    #$1E
                bne     loc_752E
                ldaa    #$B
                bra     loc_7549
; ---------------------------------------------------------------------------

loc_752E:                               ; CODE XREF: sub_751A+E↑j
                cmpb    #$14
                blt     loc_7538
                ldaa    #$A
                subb    #$14
                bra     loc_7540
; ---------------------------------------------------------------------------

loc_7538:                               ; CODE XREF: sub_751A+16↑j
                cmpb    #$A
                blt     loc_7543
                subb    #$A
                ldaa    #9

loc_7540:                               ; CODE XREF: sub_751A+1C↑j
                jsr     LAMP_TABLE_INDEXER

loc_7543:                               ; CODE XREF: sub_751A+20↑j
                tstb
                beq     locret_754C
                ldaa    #$FF
                aba

loc_7549:                               ; CODE XREF: sub_751A+12↑j
                jsr     LAMP_TABLE_INDEXER

locret_754C:                            ; CODE XREF: sub_751A+2A↑j
                rts
; End of function sub_751A


; =============== S U B R O U T I N E =======================================


COLLECTBONUS:                           ; CODE XREF: HOLEKICKERCHECK:loc_73DA↑P
                                        ; COLLECTBONUS+3A↓j
                ldaa    <RAM_BONUSADVANCESTATE
                psha

loc_7550:                               ; CODE XREF: COLLECTBONUS+16↓j
                bsr     sub_751A

loc_7552:                               ; CODE XREF: COLLECTBONUS+C↓j
                jsr     MAIN
                ldaa    <RAM_TSCORE1000
                ora     <RAM_TELLER000
                bne     loc_7552
                dec     RAM_BONUSADVANCESTATE
                bmi     loc_7565
                inc     RAM_TSCORE1000
                bra     loc_7550
; ---------------------------------------------------------------------------

loc_7565:                               ; CODE XREF: COLLECTBONUS+11↑j
                pula
                staa    <RAM_BONUSADVANCESTATE
                ldaa    <RAM_BONUSMULTIPLIER ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus
                beq     locret_7589
                deca
                beq     loc_7578
                ldaa    #$4D ; 'M'
                jsr     LAMP_TABLE_INDEXER
                ldaa    #$C
                bra     loc_757A
; ---------------------------------------------------------------------------

loc_7578:                               ; CODE XREF: COLLECTBONUS+20↑j
                ldaa    #$4C ; 'L'

loc_757A:                               ; CODE XREF: COLLECTBONUS+29↑j
                jsr     LAMP_TABLE_INDEXER
                dec     RAM_BONUSMULTIPLIER ;  0 = 1x bonus, 1 = 2x bonus, 2= 3 x bonus
                bsr     sub_751A
                ldab    #$19
                jsr     WAITLOOP
                bra     COLLECTBONUS
; ---------------------------------------------------------------------------

locret_7589:                            ; CODE XREF: COLLECTBONUS+1D↑j
                rts
; End of function COLLECTBONUS


; =============== S U B R O U T I N E =======================================


sub_758A:                               ; CODE XREF: leftcaptiveballtarget_sw+25↑P
                                        ; leftdroptarget_sw+15↑P ...
                ora     <RAM_ALTERNATIONFLAG
                staa    <RAM_ALTERNATIONFLAG
                bra     sub_7597
; End of function sub_758A


; =============== S U B R O U T I N E =======================================


sub_7590:                               ; CODE XREF: rightslingshot_sw:slingshots↑P
                ldaa    <RAM_DROPRESETCNTR
                inca
                anda    #1
                staa    <RAM_DROPRESETCNTR
; End of function sub_7590


; =============== S U B R O U T I N E =======================================


sub_7597:                               ; CODE XREF: sub_74D9+28↑P
                                        ; sub_758A+4↑j
                ldab    <RAM_ALTERNATIONFLAG
                bitb    #4
                beq     loc_75A1
                andb    #$FD
                stab    <RAM_ALTERNATIONFLAG

loc_75A1:                               ; CODE XREF: sub_7597+4↑j
                ldaa    #$6A ; 'j'

loc_75A3:                               ; CODE XREF: sub_7597+12↓j
                jsr     LAMP_TABLE_INDEXER
                inca
                cmpa    #$70 ; 'p'
                bne     loc_75A3
                lsrb
                bcc     loc_75B4
                ldaa    #score2_D6D5
                adda    <RAM_DROPRESETCNTR
                bsr     LAMP_TABLE_INDEXER

loc_75B4:                               ; CODE XREF: sub_7597+15↑j
                lsrb
                bcc     loc_75BD
                ldaa    #$2E ; '.'
                adda    <RAM_DROPRESETCNTR
                bsr     LAMP_TABLE_INDEXER

loc_75BD:                               ; CODE XREF: sub_7597+1E↑j
                lsrb
                bcc     locret_75C6
                ldaa    #$2C ; ','
                adda    <RAM_DROPRESETCNTR
                bsr     LAMP_TABLE_INDEXER

locret_75C6:                            ; CODE XREF: sub_7597+27↑j
                rts
; End of function sub_7597


; =============== S U B R O U T I N E =======================================


SAVE_MEMORY:                            ; CODE XREF: Check_TESTSW:loc_73DD↑P
                ldaa    <RAM_CURRENTPLAYER ; holds the current player #
                ldx     #RAM_BIKECITY   ; hold the BIKE & CITY switch status where:
                                        ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
                bsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    <RAM_BIKECITY   ; hold the BIKE & CITY switch status where:
                                        ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
                coma
                bita    #$F
                bne     loc_75D7
                ora     #$F

loc_75D7:                               ; CODE XREF: SAVE_MEMORY+C↑j
                bita    #$F0
                bne     loc_75DD
                ora     #$F0

loc_75DD:                               ; CODE XREF: SAVE_MEMORY+12↑j
                coma
                staa    0,x
                rts
; End of function SAVE_MEMORY


; =============== S U B R O U T I N E =======================================


PMGETMEMORY:                            ; CODE XREF: Check_TESTSW-4C9↑P
                ldaa    <RAM_CURRENTPLAYER ; holds the current player #
                ldx     #RAM_BIKECITY   ; hold the BIKE & CITY switch status where:
                                        ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
                bsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    0,x
                staa    <RAM_BIKECITY   ; hold the BIKE & CITY switch status where:
; End of function PMGETMEMORY           ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
; ---------------------------------------------------------------------------
                db $7E ; ~
                db $75 ; u
                db $EF

; =============== S U B R O U T I N E =======================================


LIGHTBIKECITYLIGHTS:                    ; CODE XREF: Check_TESTSW-4C0↑P
                                        ; B_ike_targetsw:loc_72AC↑P
                ldab    <RAM_BIKECITY   ; hold the BIKE & CITY switch status where:
                                        ;
                                        ; B = bit 7
                                        ; I = bit 6
                                        ; K = bit 5
                                        ; E = bit 4
                                        ; C = bit 3
                                        ; I = bit 2
                                        ; T = bit 1
                                        ; Y = bit 0
                ldaa    #$1D

LIGHTBIKECITYLIGHTS1:                   ; CODE XREF: LIGHTBIKECITYLIGHTS+14↓j
                lsrb
                bcs     LIGHTBIKECITYLIGHTS2
                bsr     LAMP_TABLE_INDEXER
                bra     LIGHTBIKECITYLIGHTS3
; ---------------------------------------------------------------------------

LIGHTBIKECITYLIGHTS2:                   ; CODE XREF: LIGHTBIKECITYLIGHTS+5↑j
                adda    #$40 ; '@'
                bsr     LAMP_TABLE_INDEXER
                suba    #$40 ; '@'

LIGHTBIKECITYLIGHTS3:                   ; CODE XREF: LIGHTBIKECITYLIGHTS+9↑j
                deca
                cmpa    #$15
                bne     LIGHTBIKECITYLIGHTS1
                rts
; End of function LIGHTBIKECITYLIGHTS


; =============== S U B R O U T I N E =======================================

; routine to offset table pointed by (X) offset in (A), result in (X)

Tabble_Offset:                          ; CODE XREF: Replay_Rotary_SW_scan+12↑P
                                        ; Replay_Rotary_SW_scan+3A↑P ...
                stx     <RAM_TableOffset_MSB
                adda    <RAM_TableOffset_MSB+1
                staa    <RAM_TableOffset_MSB+1
                bcc     loc_7611
                inc     RAM_TableOffset_MSB

loc_7611:                               ; CODE XREF: Tabble_Offset+6↑j
                ldx     <RAM_TableOffset_MSB
                rts
; End of function Tabble_Offset


; =============== S U B R O U T I N E =======================================


LAMP_TABLE_INDEXER:                     ; CODE XREF: ATTRACTMODE+4F↑P
                                        ; BACKGROUNDPROCES:BACKGROUNDPROCES4↑P ...
                stx     <RAM_XSAVE1     ; save X-reg
                psha                    ; save A-reg on stack
                pshb                    ; save B-reg on stack
                clrb                    ; zero B
                anda    #$7F            ; use lower 7 bits only
                cmpa    #$3F ; '?'      ; highest bit set?
                bls     LAMP_TABLE_INDEXER1 ; no then branch
                suba    #$40 ; '@'      ; otherwise negate highest bit
                comb                    ; and set B to FF

LAMP_TABLE_INDEXER1:                    ; CODE XREF: LAMP_TABLE_INDEXER+9↑j
                ldx     #LAMP_TABLE     ; point to start data table
                bsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    0,x             ; get indexed value
                lsra
                lsra
                lsra
                lsra
                staa    <RAM_TableOffset_MSB+1 ; store indexed value (high nibble)
                clr     RAM_TableOffset_MSB ; clear
                ldaa    0,x             ; get indexed value
                ldx     <RAM_TableOffset_MSB
                tstb                    ; was highest bit set (B=$FF)?
                bpl     LAMP_TABLE_INDEXER2
                coma
                anda    $30,x
                bra     LAMP_TABLE_INDEXER3
; ---------------------------------------------------------------------------

LAMP_TABLE_INDEXER2:                    ; CODE XREF: LAMP_TABLE_INDEXER+23↑j
                ora     RAM_LAMP00,x    ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL

LAMP_TABLE_INDEXER3:                    ; CODE XREF: LAMP_TABLE_INDEXER+28↑j
                staa    RAM_LAMP00,x    ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL
                ldx     <RAM_XSAVE1     ; restore X-reg
                pulb                    ; restore B-reg from stack
                pula                    ; restore A-reg from stack
                rts
; End of function LAMP_TABLE_INDEXER


; =============== S U B R O U T I N E =======================================

; set current player indication to OFF
;

CURRENTPLAYERINDICATION_OFF:            ; CODE XREF: ADJUSTPLAYER_ATTRACTMODE+9↑P
                                        ; Check_TESTSW-297↑P ...
                clrb
                bra     CURRENTPLAYERINDICATION
; End of function CURRENTPLAYERINDICATION_OFF


; =============== S U B R O U T I N E =======================================

; set current player indication to ON
;

CURRENTPLAYERINDICATION_ON:             ; CODE XREF: ADJUSTPLAYER_ATTRACTMODE+16↑P
                                        ; Check_TESTSW+8F↓P ...
                ldab    #8

CURRENTPLAYERINDICATION:                ; CODE XREF: CURRENTPLAYERINDICATION_OFF+1↑j
                jsr     POINTTOCURRENTPLAYERDISPLAY
                stab    3,x
                rts
; End of function CURRENTPLAYERINDICATION_ON

; ---------------------------------------------------------------------------
                ldaa    #$FF

; =============== S U B R O U T I N E =======================================

; blank ALL player displays & scores routine
;

InitDisplays:                           ; CODE XREF: NMI_REGULAR+BE4↓P
                ldx     #RAM_DISP_CreditsDisplay ; point to highest location to initialize
                bra     Fill_DispMemory
; End of function InitDisplays


; =============== S U B R O U T I N E =======================================

; Blank all player displays routine
;

Blank_RAMDisplays:                      ; CODE XREF: Check_TESTSW-659↑P
                                        ; sub_7752+23↓P ...
                ldaa    #$FF
                ldx     #$F

Fill_DispMemory:                        ; CODE XREF: InitDisplays+3↑j
                                        ; Blank_RAMDisplays+8↓j
                staa    0,x             ;  Fill Memory locations pointed by X until X=0 with value in A
                dex
                bne     Fill_DispMemory
                staa    0,x
                rts
; End of function Blank_RAMDisplays


; =============== S U B R O U T I N E =======================================

; Routine to set ALL lamps ON

AllLamps_ON:                            ; CODE XREF: NMI_REGULAR+BF4↓P
                ldaa    #$FF            ; ALL bits (LAMPS) on

Fill_Lamps:                             ; CODE XREF: ALLLamps_Off+1↓j
                ldx     #RAM_LAMP00     ; point to first RAM_LAMP location

Fill_Lamps_1:                           ; CODE XREF: AllLamps_ON+B↓j
                staa    0,x             ; A-reg contents in LAMP location
                inx                     ; point to next LAMP location
                cpx     #$40 ; '@'      ; end of LAMP area reached?
                bne     Fill_Lamps_1    ; no? then back for next lamp
                rts
; End of function AllLamps_ON


; =============== S U B R O U T I N E =======================================

; Routine to shut down all lamps
;

ALLLamps_Off:                           ; CODE XREF: Check_TESTSW:INIT_CURRENTGAME↑P
                                        ; Check_TESTSW+81↓P ...
                clra                    ; ALL bits (LAMPS) off
                bra     Fill_Lamps      ; Fill LAMP area with content in A-reg
; End of function ALLLamps_Off


; =============== S U B R O U T I N E =======================================

; check if TEST switch is used

Check_TESTSW:                           ; CODE XREF: MAIN+34↓P

; FUNCTION CHUNK AT 7001 SIZE 00000022 BYTES
; FUNCTION CHUNK AT 7185 SIZE 0000007C BYTES
; FUNCTION CHUNK AT 73DD SIZE 00000082 BYTES
; FUNCTION CHUNK AT 76E5 SIZE 0000004E BYTES
; FUNCTION CHUNK AT 7BF2 SIZE 0000029E BYTES

                ldaa    <RAM_SW1_1_TEST_SW ;  fetch TEST switch status
                anda    #$1F            ; mask off bits
                cmpa    #$F             ; is TEST switch pushed?
                bne     TESTMODE_ENTRY  ; yes, enter TEST modus
                ldaa    <RAM_TESTFLAG   ; fetch TEST #
                inca                    ; increment TEST #
                staa    <RAM_TESTFLAG   ; and save TEST #
                cmpa    #4              ; highest TEST # reached?
                blt     JUMPVECTORTABLE_TESTMODE ; no, then continue next with next TEST modus
                lds     #$FF

END_TESTMODES:                          ; CODE XREF: Check_TESTSW+19↓j
                jsr     MAIN
                ldaa    <RAM_SW1_1_TEST_SW
                bne     END_TESTMODES
                jmp     POWERON
; ---------------------------------------------------------------------------

JUMPVECTORTABLE_TESTMODE:               ; CODE XREF: Check_TESTSW+F↑j
                tab                     ; transfer TEST mode # into (A)
                orb     #$F0            ; adjust for display
                stab    <RAM_DISP4_D2D1 ; display TEST mode # in player display 4 d2 & d1
                deca
                asla
                ldx     #TESTMODE_VTRTBL
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldx     0,x
                lds     #$FF            ; set stackpointer to $FF
                jmp     0,x             ; jump to TESTMODE1, TESTMODE2 or TESTMODE3
; ---------------------------------------------------------------------------

TESTMODE_ENTRY:                         ; CODE XREF: Check_TESTSW+6↑j
                ldaa    <RAM_TESTFLAG   ; ------------------
                                        ; hold the test sequence number
                                        ; 0 = no test
                                        ; 1 = lamp, replay level and rom test sequence
                                        ; 2 = solenoid test sequence
                                        ; 3 = switch test sequence
                                        ; ------------------
                ora     <RAM_LOCKOUTFLAG ; lock-out coil flag
                bne     locret_76D5
                jsr     RAMCOINS1WSUB
                ldaa    <RAM_STARTSW    ; fetch START switch status
                anda    #$F             ; mask bits
                cmpa    #7
                bne     loc_76BD
                jsr     sub_7752

loc_76BD:                               ; CODE XREF: Check_TESTSW+41↑j
                ldaa    <RAM_SLAMSW     ; holds the SLAM switch status
                bsr     sub_76D6
                cmpb    #1
                bhi     TILT_ROUTINE
                ldaa    <RAM_TILTCABINETSW ; holds the TILT CABINET switch status
                bsr     sub_76D6
                cmpb    #1
                bhi     TILT_ROUTINE
                ldaa    <RAM_TILTPENDULUMSW ; holds the TILT PENDULUM switch status
                bsr     sub_76D6
                cmpb    #1
                bhi     TILT_ROUTINE

locret_76D5:                            ; CODE XREF: Check_TESTSW+36↑j
                rts
; End of function Check_TESTSW


; =============== S U B R O U T I N E =======================================


sub_76D6:                               ; CODE XREF: Check_TESTSW+48↑p
                                        ; Check_TESTSW+50↑p ...
                ldab    #8
                stab    <RAM_TableOffset_MSB
                clrb

loc_76DB:                               ; CODE XREF: sub_76D6+C↓j
                lsra
                bcc     loc_76DF
                incb

loc_76DF:                               ; CODE XREF: sub_76D6+6↑j
                dec     RAM_TableOffset_MSB
                bne     loc_76DB
                rts
; End of function sub_76D6

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR Check_TESTSW

TILT_ROUTINE:                           ; CODE XREF: Check_TESTSW+4C↑j
                                        ; Check_TESTSW+54↑j ...
                lds     #$FF
                bsr     Clearmemory_8DtoA7 ;  clear memory from $8d to $A7
                ldaa    #$A
                staa    <RAM_latch108E
                clra
                staa    <RAM_FLIPPERSENABLE
                staa    <RAM_COINCOUNT+1
                staa    <RAM_EXTRABALLFLAG
                inca
                staa    <RAM_LOCKOUTFLAG ; lock-out coil flag
                jsr     ALLLamps_Off    ; routine to shut down ALL lamps
                ldaa    #$11
                jsr     LAMP_TABLE_INDEXER
                ldaa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                beq     TILT_ROUTINE4
                staa    <RAM_SCOREFLAG  ;  0 = no score, 1 = scored
                jsr     CURRENTPLAYERINDICATION_ON ; set current player indication to ON
                                        ;

TILT_ROUTINE1:                          ; CODE XREF: Check_TESTSW+9A↓j
                jsr     MAIN
                bsr     CLEARBALL
                ldaa    OUTHOLEKICKER_SW
                bpl     TILT_ROUTINE1

TILT_ROUTINE2:                          ; CODE XREF: Check_TESTSW+A6↓j
                clrb

TILT_ROUTINE3:                          ; CODE XREF: Check_TESTSW+A9↓j
                jsr     MAIN
                ldaa    <RAM_SLAMSW     ; holds the SLAM switch status
                ora     <RAM_TILTCABINETSW ; holds the TILT CABINET switch status
                ora     <RAM_TILTPENDULUMSW ; holds the TILT PENDULUM switch status
                bne     TILT_ROUTINE2
                decb
                bne     TILT_ROUTINE3
                clr     RAM_LOCKOUTFLAG ; lock-out coil flag
                jmp     loc_73DD
; ---------------------------------------------------------------------------

TILT_ROUTINE4:                          ; CODE XREF: Check_TESTSW+8B↑j
                ldab    #$32 ; '2'
                jsr     WAIT100MSEC
                clr     RAM_LOCKOUTFLAG ; lock-out coil flag
                jmp     Entry_mainloop
; END OF FUNCTION CHUNK FOR Check_TESTSW

; =============== S U B R O U T I N E =======================================

;  clear memory from $8d to $A7

Clearmemory_8DtoA7:                     ; CODE XREF: Check_TESTSW+71↑p
                                        ; NMI_REGULAR:TESTMODE1↓P
                ldx     #$8D

Clearmemory_8DtoA7_1:                   ; CODE XREF: Clearmemory_8DtoA7+9↓j
                clr     0,x
                inx
                cpx     #$A7
                bne     Clearmemory_8DtoA7_1
                rts
; End of function Clearmemory_8DtoA7


; =============== S U B R O U T I N E =======================================


CLEARBALL:                              ; CODE XREF: Check_TESTSW:Main_loop↑P
                                        ; Check_TESTSW+95↑p
                ldaa    LEFTHOLEKICKER_SW
                bpl     HOLEKICKERSWSUB1
                ldaa    #6
                staa    <RAM_LEFTHOLEKICKER_SW

HOLEKICKERSWSUB1:                       ; CODE XREF: CLEARBALL+3↑j
                ldaa    RIGHTHOLEKICKER_SW
                bpl     HOLEKICKERSWRET
                ldaa    #6
                staa    <RAM_RIGHTHOLEKICKER_SW

HOLEKICKERSWRET:                        ; CODE XREF: CLEARBALL+C↑j
                rts
; End of function CLEARBALL


; =============== S U B R O U T I N E =======================================


sub_7752:                               ; CODE XREF: Check_TESTSW+43↑P

; FUNCTION CHUNK AT 7185 SIZE 0000007C BYTES

                ldaa    <RAM_CREDITS_CNTR ; get #number of credits
                beq     locret_7766     ;  if zero then end
                ldaa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                beq     loc_7767
                ldaa    <RAM_NUMBEROFPLAYERS ; get number of players in game
                cmpa    #4
                beq     locret_7766
                ldaa    <RAM_CURRENTBALL ; get current ball in play
                cmpa    #1
                beq     loc_7788

locret_7766:                            ; CODE XREF: sub_7752+2↑j
                                        ; sub_7752+C↑j ...
                rts
; ---------------------------------------------------------------------------

loc_7767:                               ; CODE XREF: sub_7752+6↑j
                clra
                staa    <RAM_NUMBEROFPLAYERS ;  set # of player to 0
                staa    <RAM_TIMEOUT_60S ; clear timeout counter
                staa    <RAM_TIMEOUT_60S+1
                inca
                staa    <RAM_CURRENTBALL ; set current ball to 1
                staa    <RAM_CURRENTPLAYER ; set currebt player to 1
                staa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                jsr     Blank_RAMDisplays
                ldx     #4

loc_777B:                               ; CODE XREF: sub_7752+2C↓j
                clr     $AC,x
                dex
                bne     loc_777B
                ldx     #$10

loc_7783:                               ; CODE XREF: sub_7752+34↓j
                clr     $1F,x
                dex
                bne     loc_7783

loc_7788:                               ; CODE XREF: sub_7752+12↑j
                ldaa    #3
                suba    <RAM_NUMBEROFPLAYERS ; hold the number of players in the game
                asla
                asla
                ldx     #0
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                clr     0,x
                inc     RAM_NUMBEROFPLAYERS ; hold the number of players in the game
                inc     byte_92
                ldaa    #6
                staa    <RAM_PLAYSMETER
                ldaa    #$99
                jsr     Update_Credits1 ; update credits display
                ldaa    <RAM_NUMBEROFPLAYERS ; hold the number of players in the game
                cmpa    #1
                bne     locret_7766
                lds     #$FF
                jmp     INIT_CURRENTGAME ; initialise current game
; End of function sub_7752


; =============== S U B R O U T I N E =======================================


SW2_6SUB:                               ; CODE XREF: RAMCOINS1WSUB↓p
                ldx     #SW2_toggle6
                jsr     GETOPTIONSWITCHMODE ; check dipswitch settings
                                        ;
                                        ; INPUT=ADDR  ;OUTPUT 0-1-2-3  SW. STATE ADDR+1, ADDR
                                        ;
                psha
                ldx     #SW2_toggle4    ; point to SW2_toggle4
                jsr     GETOPTIONSWITCHMODE ; check dipswitch settings
                                        ;
                                        ; INPUT=ADDR  ;OUTPUT 0-1-2-3  SW. STATE ADDR+1, ADDR
                                        ;
                pulb
                aslb
                aslb
                aba
                asla
                asla
                ldx     #COINMODETABLES
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    0,x
                staa    <RAM_LEFTCOINTMODE
                ldaa    1,x
                staa    <RAM_LEFTCOINTMODE+1
                ldaa    2,x
                staa    <RAM_RIGHTCOINMODE
                ldaa    3,x
                staa    <RAM_RIGHTCOINMODE+1
                rts
; End of function SW2_6SUB


; =============== S U B R O U T I N E =======================================


RAMCOINS1WSUB:                          ; CODE XREF: Check_TESTSW+38↑P
                bsr     SW2_6SUB
                ldaa    <RAM_COIN1SW    ; holds the COIN1 switch status
                anda    #$F             ; mask unused bits
                cmpa    #7              ; coin 1 accepted?
                bne     RAMCOINSW2SUB   ; no, then check coin 2
                ldab    <RAM_COIN1COUNTER ; holds the number of coins #1
                ldx     #RAM_LEFTCOINTMODE
                bsr     sub_7800
                stab    <RAM_COIN1COUNTER ; holds the number of coins #1

RAMCOINSW2SUB:                          ; CODE XREF: RAMCOINS1WSUB+8↑j
                ldaa    <RAM_COIN2SW    ; holds the COIN2 switch status
                anda    #$F             ; mask unused bits
                cmpa    #7              ; coin 2 accepted?
                bne     RAMCOINSW2RET   ; no then end routine
                ldab    <RAM_COIN2COUNTER ; holds the number of coins #2
                ldx     #RAM_RIGHTCOINMODE
                bsr     sub_7800
                stab    <RAM_COIN2COUNTER ; holds the number of coins #2

RAMCOINSW2RET:                          ; CODE XREF: RAMCOINS1WSUB+19↑j
                rts
; End of function RAMCOINS1WSUB


; =============== S U B R O U T I N E =======================================


sub_7800:                               ; CODE XREF: RAMCOINS1WSUB+F↑p
                                        ; RAMCOINS1WSUB+20↑p
                tstb
                bne     loc_780C
                ldaa    0,x
                lsra
                lsra
                lsra
                lsra
                incb
                bra     loc_7826
; ---------------------------------------------------------------------------

loc_780C:                               ; CODE XREF: sub_7800+1↑j
                cmpb    #1
                bne     loc_781F
                ldaa    1,x
                bita    #$F0
                beq     loc_7818
                addb    #2

loc_7818:                               ; CODE XREF: sub_7800+14↑j
                decb
                ldaa    0,x
                anda    #$F
                bra     loc_7826
; ---------------------------------------------------------------------------

loc_781F:                               ; CODE XREF: sub_7800+E↑j
                clrb
                ldaa    1,x
                lsra
                lsra
                lsra
                lsra

loc_7826:                               ; CODE XREF: sub_7800+A↑j
                                        ; sub_7800+1D↑j
                pshb
                jsr     Update_Credits
                pulb
                ldaa    1,x
                anda    #$F
                adda    <RAM_COINCOUNT
                staa    <RAM_COINCOUNT
                ldaa    <RAM_RIGHTCOINMODE
                cmpa    <RAM_LEFTCOINTMODE
                bne     locret_7843
                ldaa    <RAM_RIGHTCOINMODE+1
                cmpa    <RAM_LEFTCOINTMODE+1
                bne     locret_7843
                stab    <RAM_COIN1COUNTER ; holds the number of coins #1
                stab    <RAM_COIN2COUNTER ; holds the number of coins #2

locret_7843:                            ; CODE XREF: sub_7800+37↑j
                                        ; sub_7800+3D↑j
                rts
; End of function sub_7800


; =============== S U B R O U T I N E =======================================


MAIN:                                   ; CODE XREF: Check_TESTSW-665↑P
                                        ; Check_TESTSW:loc_71FC↑P ...
                psha                    ; save A-reg, push a to stack
                pshb                    ; save B-reg, push to stack
                stx     <RAM_XSAVE      ; ;save X-reg, save in RAM
                jsr     SolenoidTest    ; routine to test solenoids
                jsr     OUTPUTLATCH
                ldaa    <RAM_TESTFLAG   ; any testmode set?
                bne     TESTMODE_SET    ; then jump to testmode
                ldaa    <RAM_LEFTSLINGSHOTDELAY
                beq     loc_7859
                dec     RAM_LEFTSLINGSHOTDELAY

loc_7859:                               ; CODE XREF: MAIN+10↑j
                ldaa    <RAM_RIGHTSLINGSHOTDELAY ; initial value of counter is set to $1E00
                beq     loc_7860
                dec     RAM_RIGHTSLINGSHOTDELAY ; initial value of counter is set to $1E00

loc_7860:                               ; CODE XREF: MAIN+17↑j
                jsr     sub_7A71
                ldaa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                beq     TESTMODE_SET
                bsr     DROPTARGET_RESET
                jsr     HOLEKICKERCHECK
                jsr     sub_79AC
                jsr     sub_7990
                jsr     sub_79C3

TESTMODE_SET:                           ; CODE XREF: MAIN+C↑j
                                        ; MAIN+21↑j
                jsr     GET_CABINETSWITCHES ; get all cabinet switches
                jsr     Check_TESTSW    ; check if TEST switch is used
                jsr     sub_7A5A
                jsr     PROGRAMSTATUSCHECK
                bsr     WAIT4PHASECHANGE
                ldx     <RAM_XSAVE      ; restore X-reg from RAM
                pulb                    ; restore B-reg from stack
                pula                    ; restore A-reg from stack
                rts
; End of function MAIN


; =============== S U B R O U T I N E =======================================


WAIT4PHASECHANGE:                       ; CODE XREF: MAIN+3D↑p
                                        ; WAIT4PHASECHANGE+7↓j
                ldaa    SW2_toggle4
                anda    #RAM_SW1_1_TEST_SW
                cmpa    <RAM_PHASECNTR
                beq     WAIT4PHASECHANGE ; continue waiting
                staa    WakeUP_Reset    ; stop waka-up reset
                staa    <RAM_PHASECNTR
                ldaa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                bpl     loc_78A8
                ldx     <RAM_MINUTETIMER ; get MINUTETIMER
                dex                     ; decrement it
                bne     loc_78A6        ; if minute is not elapsed jump
                ldaa    #6
                staa    <RAM_TIMEMETER
                ldx     #$1D4C          ; load 7500 (appr. 60 sec) into timeout counter 2

loc_78A6:                               ; CODE XREF: WAIT4PHASECHANGE+15↑j
                stx     <RAM_MINUTETIMER ; store TIMEOUT counter 2 value

loc_78A8:                               ; CODE XREF: WAIT4PHASECHANGE+10↑j
                ldaa    #$10            ; INCREMENT MATCH RANDOM #
                adda    <RAM_MATCHSEED
                daa
                staa    <RAM_MATCHSEED
                rts
; End of function WAIT4PHASECHANGE


; =============== S U B R O U T I N E =======================================


WAITLOOP:                               ; CODE XREF: Check_TESTSW-227↑P
                                        ; sub_74D9+8↑P ...
                jsr     MAIN
                decb
                bne     WAITLOOP
                rts
; End of function WAITLOOP


; =============== S U B R O U T I N E =======================================


WAIT100MSEC:                            ; CODE XREF: Check_TESTSW+B3↑P
                                        ; WAIT100MSEC+7↓j
                pshb                    ; save B
                ldab    #$C             ; 12 x 8 mSec
                bsr     WAITLOOP
                pulb                    ; pull B
                decb
                bne     WAIT100MSEC
                rts
; End of function WAIT100MSEC


; =============== S U B R O U T I N E =======================================


DROPTARGET_RESET:                       ; CODE XREF: MAIN+23↑p
                ldaa    <RAM_DROPCOUNTER ; IS COUNTER RUNNING?
                beq     locret_78E0     ; NO then end sub
                ldab    #$A             ; load PULSE TIMER
                cmpa    #$32            ; LEFT DROP TARGET?
                bne     loc_78CF        ; NO
                stab    <RAM_LEFTDROPTARGETSW
                bra     loc_78DD
; ---------------------------------------------------------------------------

loc_78CF:                               ; CODE XREF: DROPTARGET_RESET+8↑j
                cmpa    #$28 ; '('      ; CENTER DROP TARGET?
                bne     loc_78D7        ; NO
                stab    <RAM_CENTERDROPTARGET_SW
                bra     loc_78DD
; ---------------------------------------------------------------------------

loc_78D7:                               ; CODE XREF: DROPTARGET_RESET+10↑j
                cmpa    #$1E            ; RIGHT DROP TARGET?
                bne     loc_78DD        ; NO
                stab    <RAM_RIGHTDROPTARGET_SW

loc_78DD:                               ; CODE XREF: DROPTARGET_RESET+C↑j
                                        ; DROPTARGET_RESET+14↑j ...
                dec     RAM_DROPCOUNTER

locret_78E0:                            ; CODE XREF: DROPTARGET_RESET+2↑j
                rts
; End of function DROPTARGET_RESET


; =============== S U B R O U T I N E =======================================


HOLEKICKERCHECK:                        ; CODE XREF: MAIN+25↑P

; FUNCTION CHUNK AT 73BE SIZE 0000001F BYTES

                ldaa    <RAM_COINCOUNT+1 ; DEBOUNCE active?
                beq     HOLEKICKERSUBEND ; NO the end sub
                dec     RAM_COINCOUNT+1
                bne     HOLEKICKERSUBEND
                ldaa    OUTHOLEKICKER_SW
                bpl     LEFTHOLEKICKERSUB
                jmp     loc_73BE
; ---------------------------------------------------------------------------

LEFTHOLEKICKERSUB:                      ; CODE XREF: HOLEKICKERCHECK+C↑j
                ldaa    LEFTHOLEKICKER_SW
                bpl     RIGHTHOLEKICKERSUB
                ldab    <RAM_LAMP04     ; bit 0   A   J1-F    RIGHT SPINNER
                                        ; bit 1   A   J1-S    P IPE
                                        ; bit 2   A   J1-17   LEFT UPPER CENTER ROLLOVER
                                        ; bit 3   A   J2-5    LEFT EXTRA BALL
                                        ;         A    J13-1   STROBE A
                                        ;         A    J1-1    ILLUMINATION
                andb    #8
                ldaa    #$2E ; '.'
                bsr     CHECKEXTRABALL
                ldab    <RAM_LAMP00     ; bit   strobe pin    description
                                        ; bit 0   A   J1-B    UPPER LEFT ROLLOVER
                                        ; bit 1   A   J1-M    UPPER RIGHT ROLLOVER
                                        ; bit 2   A   J1-X    PIP E
                                        ; bit 3   A   J2-J    LEFT SPECIAL
                andb    #8
                ldaa    #$2C ; ','
                bsr     CHECKSPECIALFEATURE
                jsr     sub_74D9        ;
                                        ;
                ldaa    #6
                staa    <RAM_LEFTHOLEKICKER_SW
                rts
; ---------------------------------------------------------------------------

RIGHTHOLEKICKERSUB:                     ; CODE XREF: HOLEKICKERCHECK+14↑j
                ldaa    RIGHTHOLEKICKER_SW
                bpl     HOLEKICKERSUBEND
                ldab    <RAM_LAMP0C     ; bit 0   A   J1-7    RIGHT EXTRA BALL
                                        ; bit 1   A   J1-T    PI P E
                                        ; bit 2   A   J2-D    RIGHT UPPER CENTER ROLLOVER
                andb    #1
                ldaa    #$2F ; '/'
                bsr     CHECKEXTRABALL
                ldab    <RAM_LAMP08     ; bit 0   A   J1-3    RIGHT SPECIAL
                                        ; bit 1   A   J1-12   P I PE
                                        ; bit 2   A   J1-21   UPPER CENTER ROLLOVER
                andb    #1
                ldaa    #$2D ; '-'
                bsr     CHECKSPECIALFEATURE
                jsr     sub_74D9        ;
                                        ;
                ldaa    #6
                staa    <RAM_RIGHTHOLEKICKER_SW

HOLEKICKERSUBEND:                       ; CODE XREF: HOLEKICKERCHECK+2↑j
                                        ; HOLEKICKERCHECK+7↑j ...
                rts
; End of function HOLEKICKERCHECK


; =============== S U B R O U T I N E =======================================


CHECKEXTRABALL:                         ; CODE XREF: HOLEKICKERCHECK+1C↑p
                                        ; HOLEKICKERCHECK+39↑p
                tstb                    ; AWARD EXTRA BALL
                beq     locret_7946
                staa    <RAM_LAMPFLASH  ; FLASH LAMP
                ldab    #$8C
                stab    <RAM_LAMPFLASHCNTR
                ldaa    SW1_toggle2     ; EXTRA BALL, YES
                bmi     loc_7940        ; NO
                ldaa    #$A
                staa    <RAM_EXTRA25K_SOUND
                bra     loc_7943
; ---------------------------------------------------------------------------

loc_7940:                               ; CODE XREF: CHECKEXTRABALL+C↑j
                jsr     EXTRABALL

loc_7943:                               ; CODE XREF: CHECKEXTRABALL+12↑j
                jsr     WAITLOOP

locret_7946:                            ; CODE XREF: CHECKEXTRABALL+1↑j
                rts
; End of function CHECKEXTRABALL


; =============== S U B R O U T I N E =======================================


CHECKSPECIALFEATURE:                    ; CODE XREF: HOLEKICKERCHECK+24↑p
                                        ; HOLEKICKERCHECK+41↑p
                tstb                    ; EXTRA BALL?
                beq     locret_798F     ; NO
                psha
                ldaa    #6
                staa    <RAM_SPECIALSMETER
                clra
                staa    <RAM_CAPTIVETARGETFLAG ;  clear CAPTIVE TARGET flag
                staa    <RAM_ALTERNATIONFLAG ; clear SPECIAL
                ldx     #SW2_toggle8    ; get SPECIAL mode
                jsr     GETOPTIONSWITCHMODE ; check dipswitch settings
                                        ;
                                        ; INPUT=ADDR  ;OUTPUT 0-1-2-3  SW. STATE ADDR+1, ADDR
                                        ;
                deca
                bpl     loc_7961
                ldaa    #$14            ; LOOK
                bra     loc_796D
; ---------------------------------------------------------------------------

loc_7961:                               ; CODE XREF: CHECKSPECIALFEATURE+14↑j
                deca
                bpl     loc_7969
                jsr     sub_7BD2
                bra     loc_7974
; ---------------------------------------------------------------------------

loc_7969:                               ; CODE XREF: CHECKSPECIALFEATURE+1B↑j
                bne     loc_7971
                ldaa    #$A

loc_796D:                               ; CODE XREF: CHECKSPECIALFEATURE+18↑j
                staa    <byte_96
                bra     loc_7978
; ---------------------------------------------------------------------------

loc_7971:                               ; CODE XREF: CHECKSPECIALFEATURE:loc_7969↑j
                jsr     sub_7BD6

loc_7974:                               ; CODE XREF: CHECKSPECIALFEATURE+20↑j
                ldaa    #$10
                staa    <byte_94

loc_7978:                               ; CODE XREF: CHECKSPECIALFEATURE+28↑j
                pula
                staa    <RAM_LAMPFLASH  ; lamp to flash
                ldaa    #$FF
                staa    <RAM_LAMPFLASHCNTR

loc_797F:                               ; CODE XREF: CHECKSPECIALFEATURE+43↓j
                jsr     MAIN
                ldaa    <byte_93
                ora     <byte_94
                ora     <byte_95
                ora     <byte_96
                bne     loc_797F
                clr     RAM_LAMPFLASHCNTR

locret_798F:                            ; CODE XREF: CHECKSPECIALFEATURE+1↑j
                rts
; End of function CHECKSPECIALFEATURE


; =============== S U B R O U T I N E =======================================


sub_7990:                               ; CODE XREF: MAIN+2B↑P
                ldaa    #$E
                ldab    <RAM_EXTRABALLFLAG
                beq     loc_79A7
                dec     RAM_XTRABALLFLASH
                bmi     loc_79A3
                ldab    <RAM_XTRABALLFLASH
                cmpb    #$15
                bhi     loc_79A7
                bra     loc_79A9
; ---------------------------------------------------------------------------

loc_79A3:                               ; CODE XREF: sub_7990+9↑j
                ldab    #$20 ; ' '
                stab    <RAM_XTRABALLFLASH

loc_79A7:                               ; CODE XREF: sub_7990+4↑j
                                        ; sub_7990+F↑j
                adda    #$40 ; '@'

loc_79A9:                               ; CODE XREF: sub_7990+11↑j
                jmp     LAMP_TABLE_INDEXER
; End of function sub_7990


; =============== S U B R O U T I N E =======================================


sub_79AC:                               ; CODE XREF: MAIN+28↑P
                ldab    <RAM_LAMPFLASHCNTR
                beq     locret_79BD
                ldaa    <RAM_LAMPFLASH  ; lamp to flash
                decb
                stab    <RAM_LAMPFLASHCNTR
                andb    #$F
                beq     loc_79BE
                cmpb    #8
                beq     loc_79C0

locret_79BD:                            ; CODE XREF: sub_79AC+2↑j
                rts
; ---------------------------------------------------------------------------

loc_79BE:                               ; CODE XREF: sub_79AC+B↑j
                adda    #$40 ; '@'

loc_79C0:                               ; CODE XREF: sub_79AC+F↑j
                jmp     LAMP_TABLE_INDEXER
; End of function sub_79AC


; =============== S U B R O U T I N E =======================================


sub_79C3:                               ; CODE XREF: MAIN+2E↑P
                ldaa    <RAM_SCOREFLAG  ;  0 = no score, 1 = scored
                bne     loc_79D2
                dec     RAM_PLAYERUPFLASH
                bmi     loc_79D5
                ldaa    <RAM_PLAYERUPFLASH
                cmpa    #$25 ; '%'
                bhi     loc_79D9

loc_79D2:                               ; CODE XREF: sub_79C3+2↑j
                jmp     CURRENTPLAYERINDICATION_ON ; set current player indication to ON
                                        ;
; ---------------------------------------------------------------------------

loc_79D5:                               ; CODE XREF: sub_79C3+7↑j
                ldaa    #$40 ; '@'
                staa    <RAM_PLAYERUPFLASH

loc_79D9:                               ; CODE XREF: sub_79C3+D↑j
                jmp     CURRENTPLAYERINDICATION_OFF ; set current player indication to OFF
; End of function sub_79C3              ;


; =============== S U B R O U T I N E =======================================

; get all cabinet switches

GET_CABINETSWITCHES:                    ; CODE XREF: MAIN:TESTMODE_SET↑P
                ldaa    SW1_toggle1_SW_TEST ; SW-1 toggle1 and TEST button are connected in parallel so function is the same, so even if only power connected to board you can test the board by using swithc 1-1 as testbutton
                rola
                rol     RAM_SW1_1_TEST_SW
                ldaa    COIN1_SW
                rola
                rol     RAM_COIN1SW     ; holds the COIN1 switch status
                ldaa    COIN2_SW
                rola
                rol     RAM_COIN2SW     ; holds the COIN2 switch status
                ldaa    START_SW
                rola
                rol     RAM_STARTSW     ; holds the START switch status
                ldaa    SLAM_SW
                rola
                rol     RAM_SLAMSW      ; holds the SLAM switch status
                ldaa    SLAMCABINET_SW
                rola
                rol     RAM_TILTCABINETSW ; holds the TILT CABINET switch status
                ldaa    TILTPENDULUM_SW
                rola
                rol     RAM_TILTPENDULUMSW ; holds the TILT PENDULUM switch status
                rts
; End of function GET_CABINETSWITCHES


; =============== S U B R O U T I N E =======================================

; scan status from switches
;

SWITCHSCANNER:                          ; CODE XREF: Check_TESTSW:PSWITCH↑P
                ldx     #SLAMCABINET_SW
                stx     <RAM_SW_SCAN_PTR_MSB
                ldx     #RAM_SW_DEBOUNCE ; ""
                stx     <RAM_SW_VAL_PTR_MSB

SCANSWITCHES:                           ; CODE XREF: SWITCHSCANNER+49↓j
                ldx     <RAM_SW_SCAN_PTR_MSB
                ldab    0,x
                rolb
                rora
                ldab    1,x
                rolb
                rora
                ldab    2,x
                rolb
                rora
                ldab    3,x
                rolb
                rora
                ldab    4,x
                rolb
                rora
                ldab    5,x
                rolb
                rora
                ldab    6,x
                rolb
                rora
                ldab    7,x
                rolb
                rora
                ldx     <RAM_SW_VAL_PTR_MSB
                tab
                comb
                anda    0,x
                anda    6,x
                ora     $C,x
                staa    $C,x
                ldaa    0,x
                staa    6,x
                stab    0,x
                inc     RAM_SW_VAL_PTR_LSB
                ldaa    <byte_11
                adda    #8              ; next 8 latches
                staa    <byte_11        ; save new SWITCH SCAN pointer
                cmpa    #$50 ; 'P'      ; all switches done??? address 0x204f reached
                bne     SCANSWITCHES    ; if not all switches done return for more
                rts                     ; all switches scanned
; End of function SWITCHSCANNER


; =============== S U B R O U T I N E =======================================


sub_7A5A:                               ; CODE XREF: MAIN+37↑P
                ldaa    <RAM_COINDELAY
                beq     loc_7A62        ; if counter LSB is zero then jump
                dec     RAM_COINDELAY   ; decrement counter LSB
                rts
; ---------------------------------------------------------------------------

loc_7A62:                               ; CODE XREF: sub_7A5A+2↑j
                ldaa    <RAM_COINCOUNT
                beq     locret_7A70     ; if counter MSB is zero the jump
                dec     RAM_COINCOUNT   ; otherwise decrement counter MSB
                ldaa    #6
                staa    <RAM_COINMETER
                asla
                staa    <RAM_COINDELAY

locret_7A70:                            ; CODE XREF: sub_7A5A+A↑j
                rts
; End of function sub_7A5A


; =============== S U B R O U T I N E =======================================


sub_7A71:                               ; CODE XREF: MAIN:loc_7860↑P
                clrb
                ldaa    <RAM_LOCKOUTFLAG ; lock-out coil flag
                bne     loc_7A7D
                ldaa    <RAM_CREDITS_CNTR ; hold the number of credits
                cmpa    <RAM_Max_Credits ; holds the maximum number of credits possible
                bge     loc_7A7D
                comb

loc_7A7D:                               ; CODE XREF: sub_7A71+3↑j
                                        ; sub_7A71+9↑j
                stab    <RAM_LOCKOUTCOIL ; set to $FF if maximum credits reached
                rts
; End of function sub_7A71


; =============== S U B R O U T I N E =======================================

; routine to test solenoids

SolenoidTest:                           ; CODE XREF: MAIN+4↑P
                ldx     #RAMLEFTTHUMPERBUMPER_SW ; SOLENOID COINTERS
                stx     <RAM_SW_SCAN_PTR_MSB
                ldx     #SolenoidTestTbl
                stx     <RAM_SW_VAL_PTR_MSB
                ldaa    #$10
                staa    <RAM_XSAVE1

loc_7A8E:                               ; CODE XREF: SolenoidTest+41↓j
                ldx     <RAM_SW_SCAN_PTR_MSB
                ldaa    0,x
                beq     loc_7AA6
                bmi     loc_7A98
                dec     0,x

loc_7A98:                               ; CODE XREF: SolenoidTest+14↑j
                ldx     <RAM_SW_VAL_PTR_MSB
                ldaa    0,x
                staa    <byte_15
                ldab    1,x
                ldx     <RAM_XSAVE1
                orb     0,x
                bra     loc_7AB3
; ---------------------------------------------------------------------------

loc_7AA6:                               ; CODE XREF: SolenoidTest+12↑j
                ldx     <RAM_SW_VAL_PTR_MSB
                ldaa    0,x
                staa    <byte_15
                ldab    1,x
                ldx     <RAM_XSAVE1
                comb
                andb    0,x

loc_7AB3:                               ; CODE XREF: SolenoidTest+24↑j
                stab    0,x
                inc     byte_11
                ldx     <RAM_SW_VAL_PTR_MSB
                inx
                inx
                stx     <RAM_SW_VAL_PTR_MSB
                cpx     #$7E22          ; end of solenoidtesttable reached?
                bne     loc_7A8E        ; No, then back for more
                rts
; End of function SolenoidTest


; =============== S U B R O U T I N E =======================================


OUTPUTLATCH:                            ; CODE XREF: MAIN+7↑P

; FUNCTION CHUNK AT 7B85 SIZE 0000002F BYTES

                ldx     #$8D
                stx     <RAM_SW_SCAN_PTR_MSB
                clr     RAM_SW_VAL_PTR_MSB

loc_7ACC:                               ; CODE XREF: OUTPUTLATCH+4D↓j
                ldx     <RAM_SW_SCAN_PTR_MSB
                ldaa    0,x
                bne     loc_7AD9
                ldaa    1,x
                beq     loc_7B04

loc_7AD6:                               ; CODE XREF: OUTPUTLATCH+38↓j
                dec     1,x
                clra

loc_7AD9:                               ; CODE XREF: OUTPUTLATCH+C↑j
                inca
                staa    0,x
                ldaa    <RAM_SW_VAL_PTR_MSB
                ldx     #TILTSOUND      ; sound tables
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                stx     <RAM_XSAVE1
                ldaa    <RAM_SOLB1
                anda    #$F0
                ldab    2,x
                aba
                staa    OUTLATCH1080
                ldaa    3,x
                ldab    4,x
                ldx     <RAM_SW_SCAN_PTR_MSB
                cmpa    0,x
                bhi     loc_7AFE
                tst     1,x
                bne     loc_7AD6

loc_7AFE:                               ; CODE XREF: OUTPUTLATCH+34↑j
                cmpb    0,x
                bge     loc_7B17
                clr     0,x

loc_7B04:                               ; CODE XREF: OUTPUTLATCH+10↑j
                ldaa    <RAM_SW_VAL_PTR_MSB
                adda    #7
                staa    <RAM_SW_VAL_PTR_MSB
                inx
                inx
                stx     <RAM_SW_SCAN_PTR_MSB
                cpx     #$A7
                bne     loc_7ACC
                staa    Audio_Disable

locret_7B16:                            ; CODE XREF: OUTPUTLATCH+81↓j
                                        ; OUTPUTLATCH+89↓j
                rts
; ---------------------------------------------------------------------------

loc_7B17:                               ; CODE XREF: OUTPUTLATCH+3C↑j
                staa    Audio_Disable
                staa    Audio_Enable
                ldaa    0,x
                psha
                ldx     <RAM_XSAVE1
                ldx     0,x
                deca
                jsr     Tabble_Offset   ; routine to offset table pointed by (X) offset in (A), result in (X)
                ldaa    <RAM_SOLB2
                anda    #$F0
                ldab    0,x
                andb    #$F
                aba
                staa    OUTLATCH1084
                ldaa    <RAM_SOLB3
                anda    #$F0
                ldab    0,x
                lsrb
                lsrb
                lsrb
                lsrb
                aba
                staa    OUTLATCH1088
                pula
                cmpa    #1
                bne     locret_7B16
                ldx     <RAM_XSAVE1
                ldaa    5,x
                cmpa    #$FF
                beq     locret_7B16
                ldab    6,x
                bra     loc_7B85
; End of function OUTPUTLATCH


; =============== S U B R O U T I N E =======================================

; point to LSB of current player display
;
; on exit reg X & RAM_TableOffset_MSB has the LSB display position of current player
;

POINTTOCURRENTPLAYERDISPLAY:            ; CODE XREF: CURRENTPLAYERINDICATION_ON:CURRENTPLAYERINDICATION↑P
                                        ; sub_7B61↓p ...
                ldaa    #4
                suba    <RAM_CURRENTPLAYER ; holds the current player #
                asla
                asla
                clr     RAM_TableOffset_MSB
                staa    <RAM_TableOffset_MSB+1
                ldx     <RAM_TableOffset_MSB
                rts
; End of function POINTTOCURRENTPLAYERDISPLAY


; =============== S U B R O U T I N E =======================================


sub_7B61:                               ; CODE XREF: OUTPUTLATCH+E8↓p
                bsr     POINTTOCURRENTPLAYERDISPLAY
                ldaa    #3

loc_7B65:                               ; CODE XREF: sub_7B61+21↓j
                ldab    $22,x
                bmi     loc_7B7B
                tst     RAM_TableOffset_MSB
                bne     loc_7B7E
                cmpb    #$F
                bgt     loc_7B7B
                cmpb    #0
                bne     loc_7B79
                comb
                bra     loc_7B7E
; ---------------------------------------------------------------------------

loc_7B79:                               ; CODE XREF: sub_7B61+13↑j
                orb     #$F0

loc_7B7B:                               ; CODE XREF: sub_7B61+6↑j
                                        ; sub_7B61+F↑j
                inc     RAM_TableOffset_MSB

loc_7B7E:                               ; CODE XREF: sub_7B61+B↑j
                                        ; sub_7B61+16↑j
                stab    2,x
                dex
                deca
                bne     loc_7B65
                rts
; End of function sub_7B61

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR OUTPUTLATCH

loc_7B85:                               ; CODE XREF: OUTPUTLATCH+8D↑j
                psha
                pshb
                ldaa    <RAM_SCOREFLAG  ;  0 = no score, 1 = scored
                bne     loc_7B93
                staa    <RAM_EXTRABALLFLAG
                coma
                staa    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                inc     RAM_SCOREFLAG   ;  0 = no score, 1 = scored

loc_7B93:                               ; CODE XREF: OUTPUTLATCH+C5↑j
                bsr     POINTTOCURRENTPLAYERDISPLAY
                pula
                adda    $20,x
                daa
                staa    $20,x
                pula
                adca    $21,x
                daa
                staa    $21,x
                ldaa    $22,x
                staa    <RAM_SW_SCAN_PTR_MSB
                adca    #0
                daa
                staa    $22,x
                staa    <RAM_SW_VAL_PTR_MSB
                bsr     sub_7B61
                ldaa    <RAM_First_Replay_Level ; hold the first replay level
                bsr     sub_7BB4
                ldaa    <RAM_Second_Replay_Level ; hold the second replay level
; END OF FUNCTION CHUNK FOR OUTPUTLATCH

; =============== S U B R O U T I N E =======================================


sub_7BB4:                               ; CODE XREF: OUTPUTLATCH+EC↑p
                cmpa    <RAM_SW_SCAN_PTR_MSB
                bls     locret_7BBC
                cmpa    <RAM_SW_VAL_PTR_MSB
                bls     loc_7BBD

locret_7BBC:                            ; CODE XREF: sub_7BB4+2↑j
                rts
; ---------------------------------------------------------------------------

loc_7BBD:                               ; CODE XREF: sub_7BB4+6↑j
                ldaa    #6
                staa    <RAM_REPLAYMETER
                ldaa    SW1_toggle8     ; Add-A-Ball or Replay modus?
                bpl     loc_7BCE
                ldaa    #1
                bra     Update_Credits
; End of function sub_7BB4


; =============== S U B R O U T I N E =======================================


EXTRABALL:                              ; CODE XREF: CHECKEXTRABALL:loc_7940↑P
                ldaa    #6
                staa    <RAM_EXTRABALLMETER

loc_7BCE:                               ; CODE XREF: sub_7BB4+10↑j
                ldaa    #$A
                staa    <byte_98
; End of function EXTRABALL


; =============== S U B R O U T I N E =======================================


sub_7BD2:                               ; CODE XREF: CHECKSPECIALFEATURE+1D↑P
                inc     RAM_EXTRABALLFLAG
                rts
; End of function sub_7BD2


; =============== S U B R O U T I N E =======================================


sub_7BD6:                               ; CODE XREF: Check_TESTSW-22C↑P
                                        ; CHECKSPECIALFEATURE:loc_7971↑P
                ldaa    #6
                staa    <RAM_REPLAYMETER
                ldaa    #1
; End of function sub_7BD6


; =============== S U B R O U T I N E =======================================


Update_Credits:                         ; CODE XREF: sub_7800+27↑P
                                        ; sub_7BB4+14↑j
                tab
                addb    <byte_90
                stab    <byte_90
; End of function Update_Credits


; =============== S U B R O U T I N E =======================================

; update credits display

Update_Credits1:                        ; CODE XREF: sub_7752+50↑P
                adda    #0
                daa
                adda    <RAM_CREDITS_CNTR ; hold the number of credits
                daa
                cmpa    <RAM_Max_Credits ; holds the maximum number of credits possible
                bls     Update_Credits2
                ldaa    <RAM_Max_Credits ; holds the maximum number of credits possible

Update_Credits2:                        ; CODE XREF: Update_Credits1+8↑j
                staa    <RAM_CREDITS_CNTR ; hold the number of credits
                staa    <RAM_DISP_CreditsDisplay ; holds the number of games to play (BCD)
                rts
; End of function Update_Credits1

; ---------------------------------------------------------------------------
; START OF FUNCTION CHUNK FOR NMI_REGULAR
;   ADDITIONAL PARENT FUNCTION Check_TESTSW

POWERON:                                ; CODE XREF: NMI_REGULAR:NMI_BADCHECK↑J
                                        ; Check_TESTSW+1B↑J
                                        ; DATA XREF: ...
                lds     #$FF            ; set stackpointer to $FF
                clr     OUTLATCH1080    ; outputs to zero
                clr     OUTLATCH1084
                clr     OUTLATCH1088
                clr     OUTLATCH108C
                ldaa    #$55 ; 'U'      ; set RAM_restart0&1 to 55AA so the machine knows it no cold_boot anymore
                staa    <RAM_RAM_Status+1 ; RAM test location
                coma                    ; complement 55 -> AA
                staa    <RAM_RAM_Status ; RAM test location
                ldx     #(RAM_MINUTETIMER+1) ;  point to highest memorylocation to clear

ClearMemory:                            ; CODE XREF: NMI_REGULAR+BCC↓j
                clr     0,x             ; clear memorylocation
                dex                     ; decrement memoryaddress
                bne     ClearMemory     ; all memory cleared? No, back for more
                ldaa    #$FF
                ldx     #4              ;  init 4 switches START, COIN2, COIN1 & SW1_1 (value =$fF)

loc_7C15:                               ; CODE XREF: NMI_REGULAR+BD6↓j
                staa    RAM_LAMP0F,x    ; bit 0   D   J1-L    BONUS 2K
                                        ; bit 1   D   J1-W    BONUS 6K
                                        ; bit 2   D   J2-H    BONUS 10K
                dex
                bne     loc_7C15
                ldaa    SW1_toggle1_SW_TEST ; is TEST mode enabled (TEST button pushed or SW1-1 set)?
                bpl     START_ATTRACTMODE ; No, then start Attract mode
                inc     RAM_TESTFLAG    ;  increment test ptr ( next test level)
                bra     TESTMODE1       ; TESTMODE 1 LAMP, DISPLAY & ROM TEST
; ---------------------------------------------------------------------------

START_ATTRACTMODE:                      ; CODE XREF: NMI_REGULAR+BDB↑j
                ldaa    #$88            ;  turn on all segments on all displays (in memory)
                jsr     InitDisplays
                ldx     #$1D4C          ; load 7500 (appr. 60 sec) into timeout counters
                                        ; so when machine starts or exits from test and nothing is done displays give all 8's and after timeout elapsed the display is cleared
                stx     <RAM_MINUTETIMER ; minute timer
                stx     <RAM_TIMEOUT_60S
                jmp     Entry_mainloop
; ---------------------------------------------------------------------------
;
;-------------------
; TESTMODE 1 LAMP, DISPLAY & ROM TEST
;-------------------

TESTMODE1:                              ; CODE XREF: NMI_REGULAR+BE0↑j
                                        ; DATA XREF: NMI_REGULAR:TESTMODE_VTRTBL↓o
                jsr     Clearmemory_8DtoA7 ; TESTMODE 1 LAMP, DISPLAY & ROM TEST
                jsr     AllLamps_ON     ;  Routine to set ALL lamps ON
                clrb                    ; clear B
                stab    <RAM_GAME_COINFLAG ; GAME FLAG 0=ATT, 1=GAME, FF=SCORED
                comb
                clra
                ldx     #$7000          ; point to first PROM location

TESTPROM7000:                           ; CODE XREF: NMI_REGULAR+C08↓j
                adda    0,x             ; test eprom 7000-7800
                staa    WakeUP_Reset    ; during testmode1 contains the ROMcheck
                inx
                cpx     #$7800
                bne     TESTPROM7000    ; test eprom 7000-7800
                tsta                    ; result of all bytes added must be zero
                beq     TESTPROM7000_END ; if correct then go check second ROM
                andb    #$1F            ; else indicate [1x]  as PROM 1 failure

TESTPROM7000_END:                       ; CODE XREF: NMI_REGULAR+C0B↑j
                clra                    ; reset A to check second rom

TESTPROM7800:                           ; CODE XREF: NMI_REGULAR+C19↓j
                adda    0,x             ; test eprom 800-7fff
                staa    WakeUP_Reset    ; during testmode1 contains the ROMcheck
                inx                     ; point to next ROM location
                cpx     #$8000          ; end of ROM2 reached?
                bne     TESTPROM7800    ; no, then back for more
                tsta                    ; result of all added bytes must me zero
                beq     TESTPROM7800_END ; if correct then end PROM check
                andb    #$F2            ; indicate [x2] as PROM2 failure

TESTPROM7800_END:                       ; CODE XREF: NMI_REGULAR+C1C↑j
                stab    <RAM_PROMERR    ; holds PROM check during TEST 1
                                        ;
                                        ; FF= (blank) no PROM failures
                                        ; 1F= failure in PROM 7000-77FF
                                        ; F2= failure in PROM 7800-7FFF
                                        ; 12= failure in both PROM's

TESTMODE1_DSP_SECONDREPLAY:             ; CODE XREF: NMI_REGULAR+C50↓j
                jsr     Blank_RAMDisplays ; blank all displays
                clrb
                ldaa    <RAM_Second_Replay_Level ; fetch second replay level
                beq     TESTMODE1_DSP_FIRSTREPLAY ; if not filled jump to check first level
                staa    <RAM_DISP2_D6D5 ; display SECOND REPLAY LEVEL in DISP2
                stab    <RAM_DISP2_D4D3
                stab    <RAM_DISP2_D2D1

TESTMODE1_DSP_FIRSTREPLAY:              ; CODE XREF: NMI_REGULAR+C28↑j
                ldaa    <RAM_First_Replay_Level ; fetch first replay level
                beq     TESTMODE1_DSP_BALLCREDITS ; if not filled (replay/add-a-ball level 0) then jump
                staa    <RAM_DISP1_D6D5 ; display FIRST REPLAY LEVEL in DISP1
                stab    <RAM_DISP1_D4D3
                stab    <RAM_DISP1_D2D1

TESTMODE1_DSP_BALLCREDITS:              ; CODE XREF: NMI_REGULAR+C32↑j
                ldaa    <RAM_BALL_Per_Game ; fetch balls per game
                staa    <RAM_DISP_CurrentBallDisplay ; and  display it
                ldaa    <RAM_Max_Credits ; fetch MAX Credits
                staa    <RAM_DISP_CreditsDisplay ; and display it
                ldaa    #$F1            ; set DISP4 to diplay "blank 1" indicating TEST #1 (=LAMP, REPLAY LEVELS AND ROM TEST)
                staa    <RAM_DISP4_D2D1 ; display 4 set to display 1
                ldaa    <RAM_PROMERR    ; fetch PROM check
                                        ;
                                        ; FF= (blank) no PROM failures
                                        ; 1F= failure in PROM 7000-77FF
                                        ; F2= failure in PROM 7800-7FFF
                                        ; 12= failure in both PROM's
                staa    <RAM_DISP4_D6D5 ; and display in first 2 digits DISP4
                jsr     Replay_Rotary_SW_scan ; routine to scan the rotary switch
                jsr     MAIN
                bra     TESTMODE1_DSP_SECONDREPLAY
; ---------------------------------------------------------------------------
;
;-------------------
; TESTMODE 2 SOLENOIDTEST
;-------------------

TESTMODE2:                              ; CODE XREF: NMI_REGULAR+C7E↓j
                                        ; DATA XREF: NMI_REGULAR:TESTMODE_VTRTBL↓o
                com     RAM_DISP_CurrentBallDisplay ; TESTMODE 2 = SOLENOIDTEST
                jsr     ALLLamps_Off    ; routine to shut down ALL lamps
                ldx     #$59 ; 'Y'
                ldaa    #1

TESTMODE2_1:                            ; CODE XREF: NMI_REGULAR+C73↓j
                                        ; NMI_REGULAR+C7C↓j
                staa    <RAM_DISP_CreditsDisplay ; holds the number of games to play (BCD)
                ldab    #$A             ; activate solenoid 1st time
                stab    0,x
                ldab    #$64 ; 'd'
                jsr     WAITLOOP        ; wait
                ldab    #$A             ; activate solenoid 2nd time
                stab    0,x
                ldab    #$64 ; 'd'
                jsr     WAITLOOP        ; wait
                ldab    <RAM_STARTSW    ; move to next on start
                beq     TESTMODE2_1
                adda    #1
                daa
                inx                     ; point to next solenoid
                cpx     #$65 ; 'e'      ; end of solenoids reached?
                bne     TESTMODE2_1     ; no then test solenoid
                bra     TESTMODE2       ; TESTMODE 2 = SOLENOIDTEST
; ---------------------------------------------------------------------------
;
;-------------------
; TESTMODE 3 SWITCHTEST
;-------------------

TESTMODE3:                              ; CODE XREF: NMI_REGULAR+CA1↓j
                                        ; DATA XREF: NMI_REGULAR:TESTMODE_VTRTBL↓o
                clra                    ; TESTMODE 3 = SWITCHTEST
                staa    <RAM_DISP_CreditsDisplay ; holds the number of games to play (BCD)
                ldx     #COIN1_SW
                jsr     MAIN

TESTMODE3_1:                            ; CODE XREF: NMI_REGULAR+C9F↓j
                adda    #1
                daa
                ldab    0,x
                bpl     TESTMODE3_2
                staa    <RAM_DISP_CreditsDisplay ; holds the number of games to play (BCD)
                ldab    #1
                stab    <RAM_TSCORE100_1
                ldab    #$80
                jsr     WAITLOOP

TESTMODE3_2:                            ; CODE XREF: NMI_REGULAR+C8E↑j
                inx
                cpx     #HEXCODED_SW1
                bne     TESTMODE3_1
                bra     TESTMODE3       ; TESTMODE 3 = SWITCHTEST
; ---------------------------------------------------------------------------
;
;-------------------
; SOUND TABLES
;-------------------
TILTSOUND:      dw TLTPAT               ; DATA XREF: OUTPUTLATCH+1A↑o
                                        ; sound tables
                db   8                  ; wave
                db $19                  ; 1/2 length
                db $19                  ; total length
                dw $FF00                ; score , FF=0
CREDITSOUND:    dw CRDPAT               ; credit sound
                db 2
                db $12
                db $1B
                dw $FF00
STARTSOUND:     dw K1PAT
                db 2
                db  $E
                db  $E
                dw $FF00
SPECIALSOUND:   dw K1PAT
                db   9
                db $F
                db  $F
                dw $FF00
SPECIAL5KSOUND: dw K1PAT
                db   9
                db $F
                db  $F
                dw $5000
EXTRABALLSOUND: dw K1PAT
                db  $B
                db $E
                db  $E
                dw $FF00
XTRABALL25KSOUND:dw K1PAT
                db  $B
                db $E
                db  $E
                dw $2500
DOUBLETRIPLEBONUSSOUND:dw DTBPAT
                db  $A
                db $10
                db $10
                dw $FF00
BONUSADVANCESOUND:dw BAPAT
                db 4
                db  $C
                db  $C
                dw $FF00
ONEKSOUND:      dw K1PAT
                dw $C
                db  $F
                dw $1000
HUNDREDPOINTSSOUND:dw HUNPAT
                db 3
                db  $C
                db $18
                dw $100
TENPOINTSOUND:  dw TENPAT
                db 2
                db   8
                db $10
                dw $10
MATCHSOUND:     dw DTBPAT
                db 3
                db $12
                db $12
                dw $FF00
;
;-------------------
; SOUND PATTERNS
;-------------------
HUNPAT:         db $1F                  ; DATA XREF: NMI_REGULAR:HUNDREDPOINTSSOUND↑o
                db $2E ; .
                db $3D ; =
                db $4C ; L
                db $5B ; [
                db $6A ; j
                db $79 ; y
                db $88
                db $97
                db $A6
                db $B5
                db $C4
                db $D3
                db $E2
                db $F1
                db $11
                db $22 ; "
                db $33 ; 3
                db $44 ; D
                db $55 ; U
                db $66 ; f
                db $77 ; w
                db $88
                db $99
TLTPAT:         db $1D                  ; DATA XREF: NMI_REGULAR:TILTSOUND↑o
                db $1D
                db $2D ; -
                db $3D ; =
                db $4D ; M
                db $5D ; ]
                db $6D ; m
                db $7D ; }
                db $8E
                db $9E
                db $AE
                db $BE
                db $CE
                db $DE
                db $EF
                db $DE
                db $CD
                db $DE
                db $CD
                db $DE
                db $CD
                db $DE
                db $CD
                db $DE
                db $CD
CRDPAT:         db $88                  ; DATA XREF: NMI_REGULAR:CREDITSOUND↑o
                db $88
                db   9
                db $AA
                db $AA
                db $AA
                db $AA
                db $BB
                db $CC
                db $CC
                db $CC
                db $CC
                db $CC
                db $DD
                db $EE
                db $EE
                db $EE
                db $EE
                db $EE
                db $EE
                db $FF
                db $FF
                db $FF
                db $FF
                db $FF
                db $FF
                db $EE
K1PAT:          db $1F                  ; DATA XREF: NMI_REGULAR:STARTSOUND↑o
                                        ; NMI_REGULAR:SPECIALSOUND↑o ...
                db $2F ; /
                db $3F ; ?
                db $4F ; O
                db $5F ; _
                db $6F ; o
                db $7F ; 
                db $8F
                db $9F
                db $AF
                db $BF
                db $CF
                db $DF
                db $EF
DTBPAT:         db $1C                  ; DATA XREF: NMI_REGULAR:DOUBLETRIPLEBONUSSOUND↑o
                                        ; NMI_REGULAR:MATCHSOUND↑o
                db $FF
                db $2C ; ,
                db $EE
                db $3C ; <
                db $DD
                db $4C ; L
                db $CC
                db $5C ; \
                db $BB
                db $6C ; l
                db $AA
                db $7C ; |
                db $9C
                db $8C
                db $8C
TENPAT:         db $DD                  ; DATA XREF: NMI_REGULAR:TENPOINTSOUND↑o
                db $CC
                db $BB
                db $AA
                db $99
                db $88
                db $77 ; w
                db $67 ; g
                db $57 ; W
                db $47 ; G
                db $37 ; 7
                db $33 ; 3
                db $33 ; 3
                db $22 ; "
                db $22 ; "
                db $22 ; "
BAPAT:          db $DF                  ; DATA XREF: NMI_REGULAR:BONUSADVANCESOUND↑o
                db $CF
                db $BF
                db $AF
                db $9F
                db $8F
                db $7F ; 
                db $6F ; o
                db $5F ; _
                db $F
                db $3F ; ?
                db  $F
;
;-------------------
; LAMP TABLE
;-------------------
LAMP_TABLE:     db $B1                  ; DATA XREF: LAMP_TABLE_INDEXER:LAMP_TABLE_INDEXER1↑o
                db $F1
                db $32 ; 2
                db $72 ; r
                db $B2
                db $F2
                db $34 ; 4
                db $74 ; t
                db $B4
                db $F4
                db $38 ; 8
                db $78 ; x
                db $31 ; 1
                db $71 ; q
                db $28 ; (
                db $68 ; h
                db $61 ; a
                db $21 ; !
                db $24 ; $
                db $64 ; d
                db $A4
                db $E4
                db $42 ; B
                db $82
                db $C2
                db   4
                db $22 ; "
                db $62 ; b
                db $A2
                db $E2
                db $54 ; T
                db $41 ; A
                db $12
                db $52 ; R
                db $11
                db $94
                db $D4
                db $18
                db $58 ; X
                db $92
                db $51 ; Q
                db $A1
                db $91
                db $D1
                db   8
                db $81
                db $48 ; H
                db $C1
                db   1
                db   2
                db $44 ; D
                db $84
                db $C4
                db $D2
                db $14
                db $E1
;
;-------------------
; SOLENOID TABLE
;-------------------
SolenoidTestTbl:dw $8420                ; DATA XREF: SolenoidTest+5↑o
                                        ;  layout  testaddr. + $1000, bitvalue = solenoid
                                        ;  $84 = $1084, $20 = bit 5 => left thumber bumper
                dw $8080                ;  $80 = $1080, $80 = bit 7 = right thumper bumper
                dw $8C10                ;  $8C = $108C, $10 = bit 4 => left slingshot
                dw $8C20                ; right slingshot
                dw $8480                ; outhole kicker
                dw $8C40                ; left drop target
                dw $8880                ; center drop target
                dw $8C80                ; right drop target
                dw $8410                ; left hole kicker
                dw $8040                ; right hole kicker
                dw $8020                ; lockout control
                dw $8840                ; flipper control
                dw $8440                ; extra ball meter
                dw $8C01                ; replay meter
                dw $8C02                ; total plays
                dw $8C04                ; specials
                dw $8C08                ; time
                dw $8010                ; coin counter
;
;-------------------
; SWITCH VECTOR TABLE
;-------------------
SwithMatrix_VectorTbl:dw 0              ; DATA XREF: Check_TESTSW-488↑o
                                        ; spare
                dw 0                    ; spare
                dw topleftrollover_sw
                dw toprightrollover_sw
                dw upperleftrollover_sw
                dw upperrightrollover_sw
                dw leftthumperbumper_sw
                dw rightthumperbumper_sw
                dw 0                    ; spares
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw 0
                dw uppercenterrollover_sw
                dw lowerleftrollover_sw
                dw lowerrightrollover_sw
                dw drainandspinnerlanes_sw
                dw B_ike_targetsw
                dw b_I_ke_targetsw
                dw bi_K_e_targetsw
                dw bik_E_targetsw
                dw allkickerhole_sw
                dw rightslingshot_sw    ;
                                        ;
                dw leftslingshot_sw
                dw allkickerhole_sw
                dw allkickerhole_sw
                dw tenpoint_sw
                dw fiftypoint_sw
                dw 0
                dw leftcaptiveballtarget_sw
                dw centercaptivetarget_sw
                dw rightspinner_sw
                dw rightcaptivetarget_sw
                dw leftdroptarget_sw
                dw centerdroptarget_sw
                dw leftspinner_sw
                dw rightdroptarget_sw
                dw C_ity_targetsw
                dw c_I_ty_targetsw
                dw ci_T_y_targetsw
                dw cit_Y_targetsw
                dw 0
                dw 0
                dw 0
                dw 0
;
;-------------------
; TEST VECTOR TABLE
;-------------------
TESTMODE_VTRTBL:dw TESTMODE1            ; DATA XREF: Check_TESTSW+25↑o
                dw TESTMODE2            ; TESTMODE 1 LAMP, DISPLAY & ROM TEST
                dw TESTMODE3
;
;-------------------
; MAXIMUM CREDITS TABLE
;-------------------
Max_Credits_Per_Game_Tbl:db 5           ; DATA XREF: Replay_Rotary_SW_scan+37↑o
                                        ;   5 credits SW1-5 off SW1-6 off
                db $10                  ;  10 credits SW1-5 on SW1-6 off
                db $15                  ;  15 credits SW1-5 off SW1-6 on
                db $20                  ;  20 credits SW1-5 on SW1-6 on
;
;-------------------
; REPLAY LEVEL TABLE
;-------------------
Replay_Level_Table:dw 0                 ; DATA XREF: Replay_Rotary_SW_scan+F↑o
                                        ; pos.00 none
                dw $1216                ; pos.1 first replay $12 = 120000   second replay $ 16 = 160000
; END OF FUNCTION CHUNK FOR NMI_REGULAR
                dw $1418                ; pos.2 first $14 = 140000   second replay $ 18 = 180000
                dw $1620                ; pos.3 first $16 = 160000   second replay $ 16 = 200000
                dw $1822                ; pos.4 first $18 = 180000   second replay $ 22 = 220000
                dw $2024                ; pos.5
                dw $2226                ; pos.6
                dw $2328                ; pos.7
                dw $2530                ; pos.8
                dw $2732                ; pos.9
                dw $2934                ; pos.10
                dw $3136                ; pos.11
                dw $3338                ; pos.12
                dw $3540                ; pos.13
                dw $3742                ; pos.14
                dw $3944                ; pos.15 first $39 = 390000   second replay $ 44 = 440000
;
;-------------------
; MATCH TABLE
;-------------------
MATCHTABLE:     db $14
                db $12
                db $10
                db $10
                db  $F
                db  $F
                db  $C
                db  $A
                db  $A
                db  $A
                db   8
                db   8
                db   8
                db   8
                db   0
;
;-------------------
; ATTRACT MODE TABLE
;-------------------
ATTRACTMODETABLE:dw $FE03               ; DATA XREF: INIT_ATTRACTMODE↑o
                db $FC
                db $A                   ; set frame - turn em on
                db $9A
                db $9D
                db $9B
                db $9C                  ; (C)(Y)(I)(T)
                db $80
                db $81
                db $82
                db $83
                db $84
                db $85                  ; 12345
                db $86
                db $87
                db $88
                db $89                  ; 6789 10
                db $8A
                db $8B
                db $8C
                db $8D
                db $9E
                db $9F
                db $A3
                db $A9
                db $A4
                db $A8
                db $A5
                db $A6
                db $A7
                db $B5
                db $B6
                db $A1
                db $AA
                db $AB
                db $A0
                db $A2
                db $AC
                db $AD
                db $AE
                db $AF
                db $B2
                db $B4
                db $B3
                db $96
                db $99
                db $98
                db $97
                db $B0
                db $B1
TURNEMOUT:      db $FC
                db   8                  ; set frame 120 ms
                db $C0
                db $C1
                db $C2
                db $C3
                db $C4
                db $C5
                db $C6
                db $C7
                db $C8
                db $C9
                db $CA
                db $CB
                db $4C ; L
                db $CD
                db $5A ; Z
                db $5B ; [
                db $5C ; \
                db $DD
                db $5E ; ^
                db $DF
                db $63 ; c
                db $64 ; d
                db $68 ; h
                db $E9
                db $65 ; e
                db $66 ; f
                db $E7
                db $75 ; u
                db $F6
                db $60 ; `
                db $61 ; a
                db $E2
                db $6A ; j
                db $EB
                db $6E ; n
                db $EF
                db $6C ; l
                db $ED
                db $72 ; r
                db $73 ; s
                db $F4
                db $56 ; V
                db $57 ; W
                db $58 ; X
                db $D9
                db $70 ; p
                db $F1
                db $FD
                db $FB
                db $FE
                db  $A
                db $FC
                db  $A
                db $9F
                db $16
                db $1A
                db $A9
                db $A8
                db $17
                db $1B
                db $A6
                db $A7
                db $18
                db $1C
                db $A5
                db $A4
                db $19
                db $1D
                db $A3
                db $9E
                db $DF
                db $56 ; V
                db $5A ; Z
                db $E9
                db $E8
                db $57 ; W
                db $5B ; [
                db $E6
                db $E7
                db $58 ; X
                db $5C ; \
                db $E5
                db $E4
                db $59 ; Y
                db $5D ; ]
                db $E3
                db $DE
                db $FD
                db $FF
BACKGROUNDMODE: db $FC                  ; DATA XREF: INIT_ATTRACTMODE+5↑o
                db  $F                  ; frame = 1/8 sec
                db $CE
                db $FF
                db  $C
                db   0
                db $44 ; D
                db   6
                db $4A ; J
                db  $B
                db $47 ; G
                db   5
                db $41 ; A
                db $2E ; .
                db $2F ; /
                db $2A ; *
                db $6B ; k
                db $30 ; 0
                db $74 ; t
                db $36 ; 6
                db $72 ; r
                db $20
                db $E2
                db  $D
                db   4
                db $42 ; B
                db  $A
                db $48 ; H
                db   7
                db $49 ; I
                db   1
                db $43 ; C
                db $6C ; l
                db $6D ; m
                db $2B ; +
                db $73 ; s
                db $34 ; 4
                db $71 ; q
                db $32 ; 2
                db $75 ; u
                db $22 ; "
                db $E1
                db $4C ; L
                db $4D ; M
                db   2
                db $40 ; @
                db   8
                db $46 ; F
                db   9
                db $4B ; K
                db   3
                db $45 ; E
                db $2C ; ,
                db $2D ; -
                db $6E ; n
                db $6F ; o
                db $33 ; 3
                db $6A ; j
                db $31 ; 1
                db $70 ; p
                db $35 ; 5
                db $76 ; v
                db $21 ; !
                db $E0
                db $FF
;*
;*COIN MODE TABLES
;*
;*FORMAT    1ST BYTE - B(4-7)=1ST COIN CREDIT
;*      1ST BYTE - B(0-3)=2ND COIN CREDIT
;*      2ND BYTE - B(4-7)=3RD COIN CREDIT
;*      2ND BYTE - B(0-3)=COIN METER COUNTS
COINMODETABLES: dw $1201                ; DATA XREF: SW2_6SUB+13↑o
                dw $1201
                dw $2301
                dw $2301
                dw $101
                dw $101
                dw $1111
                dw $1111
                dw $2221
                dw $2221
                dw $3331
                dw $3331
                dw $4441
                dw $4441
                dw $5551
                dw $5551
                dw $5552
                dw $2301
                dw $EEE5
                dw $2301
                dw $CCC5
                dw $2301
                dw $555A
                dw $2225
                dw $6665
                dw $201
                dw $CCC5
                dw $2221
                dw $CCC5
                dw $401
                dw $111
                dw $111
GARBAGE:
                align $20
                db   1
                db   0
                db   6
                db   0
                db   6
                db   0
                db $F3
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
                db   0
CKSUM2:         db $53 ; S              ; 2nd ROM CHECKSUM
MASKINT_VEC:    dw POWERON
SOFTINT_VEC:    dw POWERON
NMI_VEC:        dw NMI_VECTORSTART
RESTART_VEC:    dw POWERON
; end of 'ROM'


                end
